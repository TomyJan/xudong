{
  "inode": {
    "org": "e303e78dc685",
    "id": "cmdb_workflow-l5g9lu8x5pv3",
    "schema_id": "cmdb_schema_workflow-0",
    "name": "[编辑中]发布conf和program",
    "namespace": "",
    "descr": "",
    "ctime": 1572768026,
    "mtime": 1573194216,
    "creator": "cmdb_account-3onu8wp84st9o",
    "last_editor": "cmdb_account-3onu8wp84st9o",
    "archived": false,
    "lock": ""
  },
  "data": {
    "edges": [
      {
        "from": "__START__",
        "to": "获取配置的时间变量"
      },
      {
        "from": "获取配置的时间变量",
        "to": "在qa-op01上执行buildconf_buildsql"
      },
      {
        "from": "在qa-op01上执行buildconf_buildsql",
        "to": "成功"
      },
      {
        "from": "在qa-op01上执行buildconf_buildsql",
        "to": "失败"
      },
      {
        "from": "成功",
        "to": "获取区服下的服务器并执行下载配置"
      },
      {
        "from": "获取区服下的服务器并执行下载配置",
        "to": "下载配置-成功"
      },
      {
        "from": "获取区服下的服务器并执行下载配置",
        "to": "下载配置-失败"
      },
      {
        "from": "下载配置-成功",
        "to": "获取区服下的机器并下载程序"
      },
      {
        "from": "获取区服下的机器并下载程序",
        "to": "下载程序-成功"
      },
      {
        "from": "获取区服下的机器并下载程序",
        "to": "下载程序-失败"
      },
      {
        "from": "下载程序-成功",
        "to": "停止服务"
      },
      {
        "from": "停止服务",
        "to": "停止服务-成功"
      },
      {
        "from": "停止服务",
        "to": "停止服务-失败"
      },
      {
        "from": "发布配置",
        "to": "发布配置-成功"
      },
      {
        "from": "停止服务-成功",
        "to": "发布配置"
      },
      {
        "from": "发布配置",
        "to": "发布配置-失败"
      },
      {
        "from": "发布配置-成功",
        "to": "发布程序"
      },
      {
        "from": "发布程序",
        "to": "发布程序-成功"
      },
      {
        "from": "发布程序",
        "to": "发布程序-失败"
      },
      {
        "from": "发布程序-成功",
        "to": "开启服务"
      },
      {
        "from": "开启服务",
        "to": "__END__"
      }
    ],
    "icon": "",
    "nodes": [
      {
        "auto_run": true,
        "component": "cmdb_component-vars",
        "config": {
          "schema": "{\"type\":\"object\",\"properties\":{\"region\":{\"type\":\"string\",\"title\":\"区服名称\"},\"program_br\":{\"type\":\"string\",\"title\":\"程序分支名\"},\"program_version\":{\"type\":\"string\",\"title\":\"程序的版本\"},\"process_list\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"title\":\"发布进程列表\"}},\"required\":[\"process_list\",\"program_version\"]}"
        },
        "descr": "自定义表单",
        "inputs": {
          "*": {
            "process_list": [
              "nodeserver",
              "gameserver",
              "dbgate",
              "dispatch",
              "muipserver",
              "multiserver",
              "gateserver"
            ],
            "program_br": "trunk",
            "program_version": "576936",
            "region": "qa03"
          }
        },
        "name": "__START__",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-vars",
        "config": {
          "schema": "{\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"string\",\"title\":\"成功与否\"}},\"required\":[]}"
        },
        "descr": "自定义表单",
        "inputs": {
          "开启服务": {
            "success": "{var:开启服务.output.success}"
          }
        },
        "name": "__END__",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-interpreter_ecmascript",
        "config": {
          "script": "//\n生成配置的变量: 2019-1103-1020(以分钟为单位) \n//\n// \n1. 生成配置，在机器上执行buildconf, buildsql, \n临时存放地点 /tmp/buildconf/2019-1103-1020\noss上存放地点 XXX/buildconf/2019-1103-1020\n//\n2. 发送配置文件到机器\n"
        },
        "descr": "ES2015 解析组件",
        "name": "逻辑",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-interpreter_ecmascript",
        "config": {
          "output_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"time\":{\"type\":\"string\",\"title\":\"当前时间变量\"}},\"required\":[\"time\"]}",
          "script": "// WorkflowRuntimeContext 类型对象暴露 workflow 运行时方法\nvar ctx = new WorkflowRuntimeContext()\nvar input = ctx.input() // 获取input数据\n// ctx.output({xxxx}) 输出\n\nvar cur_date = new Date()\nvar year = cur_date.getFullYear()\nvar month = cur_date.getMonth() + 1\nmonth = month >= 10? month: \"0\" + month\nvar date = cur_date.getDate()\ndate = date >= 10? date : \"0\" + date\nvar hour = cur_date.getHours()\nhour = hour >= 10? hour : \"0\" + hour\nvar minute = cur_date.getMinutes()\nminute = minute >= 10? minute : \"0\" + minute\n\nvar time = year + '-' + month + date + '-' + hour + minute\n\nctx.output({time: time})"
        },
        "descr": "ES2015 解析组件",
        "name": "获取配置的时间变量",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-condition",
        "config": {
          "array": false,
          "op": "数值-相等"
        },
        "descr": "条件判断",
        "inputs": {
          "*": {
            "target": 0
          },
          "在qa-op01上执行buildconf, buildsql": {
            "target": 0,
            "value": "{var:在qa-op01上执行buildconf, buildsql.output.exit_code}"
          },
          "在qa-op01上执行buildconf_buildsql": {
            "target": 0,
            "value": "{var:在qa-op01上执行buildconf_buildsql.output.exit_code}"
          }
        },
        "name": "成功",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-condition",
        "config": {
          "array": false,
          "op": "数值-不相等"
        },
        "descr": "条件判断",
        "inputs": {
          "*": {
            "target": 0
          },
          "在qa-op01上执行buildconf, buildsql": {
            "target": 0
          },
          "在qa-op01上执行buildconf_buildsql": {
            "target": 0,
            "value": "{var:在qa-op01上执行buildconf_buildsql.output.exit_code}"
          }
        },
        "name": "失败",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-interpreter_ecmascript",
        "config": {
          "input_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"region_value\":{\"type\":\"string\",\"title\":\"区服名称\"},\"program_br\":{\"type\":\"string\",\"title\":\"程序分支名\"},\"time\":{\"type\":\"string\",\"title\":\"时间变量\"}},\"required\":[\"region_value\",\"program_br\",\"time\"]}",
          "output_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"success\":{\"type\":\"boolean\"}},\"required\":[\"success\"]}",
          "script": "// WorkflowRuntimeContext 类型对象暴露 workflow 运行时方法\nvar ctx = new WorkflowRuntimeContext()\nvar input = ctx.input() // 获取input数据\nvar ecu = ctx.getECU()\nvar time = new Date().getTime()\n\nvar output = {\n    debug: {},\n    error: {},\n    success: false\n}\n\n// var ret = ecu.createObjects([{\n//   \"inode\": {\n//     \"schema_id\": \"cmdb_schema_schema_x-0\",\n//     \"name\": time + \"\",\n//   },\n//   \"data\": {\n//     \"data\": \"{\\\"type\\\":\\\"object\\\",\\\"title\\\":\\\"root\\\",\\\"properties\\\":{\\\"field_1\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"field_1\\\"]}\"\n//   },\n//   \"indexes\": {}\n// }])\n\nfunction main() {\n  var region_value = input.region_value\n  var program_br = input.program_br\n  var time_ver = input.time\n\n  output[\"region_value\"] = region_value\n  output[\"program_br\"] = program_br\n  output[\"time_ver\"] = time_ver\n\n\n  // 1. 根据 region_value 索引，查找对应的业务子系统\n  var q1 = {\n    conditions: [\n      {\n        field: \"inode.schema_id\",\n        op: \"=\",\n        value: \"cmdb_schema_x-xrbjlqi40big\"\n      },\n      {\n        field: \"indexes.cmdb_index-t9ul38dhptn3\",\n        op: \"=\",\n        value: region_value\n      }\n    ],\n    objects:[\"$conditions\"],\n    selects: [\".\"],\n  }\n  var ret = ecu.queryObjects(q1)\n  var sids = []\n  ret.objects.forEach(function(obj) {\n    sids.push(obj.inode.id)\n  })\n  output.debug['q1'] = q1\n  output.debug['ret1'] = ret\n\n  // 2. 根据业务子系统，查找服务器\n  var q2 = {\n    conditions: [\n      {\n        field: \"inode.schema_id\",\n        op: \"=\",\n        value: \"cmdb_schema_infra_server-0\"\n      },\n      {\n        field: \"indexes.cmdb_index-1ojgkr5s9jluq\",\n        op: \"=-\",\n        value: sids\n      }\n    ],\n    objects:[\"$conditions\"],\n    selects: [\".\"],\n  }\n  ret = ecu.queryObjects(q2)\n  output.debug['ret2'] = ret\n  output.debug['q2'] = q2\n\n  var is_success = true\n  ret.objects.forEach(function(item) {\n    // TODO: 判断agent是否存在\n    // if (item.indexes['cmdb_index-system_server'] && item.indexes['cmdb_index-system_server'].inode.id) {\n\n    // }\n    var host_name = item.inode.name\n    var agent_id = item.indexes['cmdb_index-system_server'].inode.id\n\n    var conf_download = '#!/bin/bash\\n\\nsu - work <<\\'EOF\\'\\n\\nanynowtime=\"date +\\'%Y-%m-%d %H:%M:%S\\'\"\\nNOW=\"echo [\\\\`$anynowtime\\\\`][PID:$$]\"\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe5\\xbc\\x80\\xe5\\xa7\\x8b\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe6\\x97\\xb6\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82\\nfunction job_start\\n{\\n    echo \"`eval $NOW` job_start\"\\n}\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe6\\x89\\xa7\\xe8\\xa1\\x8c\\xe6\\x88\\x90\\xe5\\x8a\\x9f\\xe7\\x9a\\x84\\xe9\\x80\\xbb\\xe8\\xbe\\x91\\xe5\\x88\\x86\\xe6\\x94\\xaf\\xe5\\xa4\\x84\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82 \\nfunction job_success\\n{\\n    MSG=\"$*\"\\n    echo \"`eval $NOW` job_success:[$MSG]\"\\n    exit 0\\n}\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe6\\x89\\xa7\\xe8\\xa1\\x8c\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\\xe7\\x9a\\x84\\xe9\\x80\\xbb\\xe8\\xbe\\x91\\xe5\\x88\\x86\\xe6\\x94\\xaf\\xe5\\xa4\\x84\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82\\nfunction job_fail\\n{\\n    MSG=\"$*\"\\n    echo \"`eval $NOW` job_fail:[$MSG]\"\\n    exit 1\\n}\\n\\njob_start\\n\\n# \\xe4\\xb8\\xba0\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe7\\x8a\\xb6\\xe6\\x80\\x81\\xe4\\xb8\\xba\\xe6\\x89\\x8b\\xe5\\xb7\\xa5\\xe8\\xbf\\x90\\xe8\\xa1\\x8c, \\xe4\\xb8\\xba1\\xe5\\x9c\\xa8opsmind\\xe4\\xb8\\x8a\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\nRUN_ON_OPSMIND=1\\n\\nif [ $RUN_ON_OPSMIND -eq 0 ];then\\n    # \\xe6\\x89\\x8b\\xe5\\xb7\\xa5\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\n    if [ $# -lt 3 ]; then\\n        job_fail \\'USAGE REGION_NAME PROGRAM_BR TIME\\'\\n    fi\\n    \\n    REGION_NAME=\"$1\"\\n    PROGRAM_BR=\"$2\"\\n    TIME=\"$3\"\\n    ####\\nelif [ $RUN_ON_OPSMIND -eq 1 ];then\\n    # \\xe5\\x9c\\xa8\\xe4\\xb8\\x8aopsmind\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe6\\x97\\xb6\\xe5\\x8a\\xa0\\xe8\\xbd\\xbd\\xe7\\x9a\\x84\\xe5\\x8f\\x98\\xe9\\x87\\x8f\\n    REGION_NAME=' + region_value + '\\n    PROGRAM_BR=' + program_br + '\\n    TIME=' + time_ver + '\\nfi\\n\\n#\\xe6\\x9b\\xb4\\xe6\\x96\\xb0\\xe7\\xbb\\x84\\xe4\\xbb\\xb6\\xe7\\x9a\\x84\\xe5\\x90\\x8d\\xe6\\x88\\x90(config\\xe4\\xb8\\xba\\xe9\\x85\\x8d\\xe7\\xbd\\xae, program\\xe4\\xb8\\xba\\xe7\\xa8\\x8b\\xe5\\xba\\x8f, data\\xe4\\xb8\\xba\\xe6\\x95\\xb0\\xe5\\x80\\xbc)\\nCOMPONENT_NAME=\"config\"\\n####################\\nUPDATE_ROOT_DIR=\"/home/data/version_update\"\\nFILENAME=\"${COMPONENT_NAME}-$TIME.tgz\"\\nCOMPONENT_DIR=${UPDATE_ROOT_DIR}/${COMPONENT_NAME}\\nDEST_DIR=${UPDATE_ROOT_DIR}/${COMPONENT_NAME}/${TIME}\\n\\n\\n#\\xe5\\x88\\x9b\\xe5\\xbb\\xba\\xe7\\x9b\\xae\\xe5\\xbd\\x95\\n[ -d $DEST_DIR ] || mkdir -p $DEST_DIR\\n\\n#delete old version\\nfunction del_old {\\n        echo -e \"\\\\e[36m delete old version \\\\e[m\"\\n        target_list=`ls -t ${COMPONENT_DIR} | awk \\'{if(NR>10){print \\\\$1}}\\'`\\n        for item in  $target_list; do\\n                rm -rf ${COMPONENT_DIR}/$item\\n        done\\n}\\n\\n\\n#\\xe4\\xb8\\x8b\\xe8\\xbd\\xbd\\xe9\\x85\\x8d\\xe7\\xbd\\xae\\xe6\\x96\\x87\\xe4\\xbb\\xb6\\nfunction get_config {\\n    OSSUTIL_URL=oss://hk4e-config/${REGION_NAME}/${TIME}/${FILENAME}\\n    ossutil cp -f $OSSUTIL_URL ${DEST_DIR} || job_fail \"\\xe4\\xb8\\x8b\\xe8\\xbd\\xbd\\xe9\\x85\\x8d\\xe7\\xbd\\xae\\xe6\\x96\\x87\\xe4\\xbb\\xb6\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\"\\n    tar xf ${DEST_DIR}/${FILENAME} -C ${DEST_DIR} || job_fail \"\\xe8\\xa7\\xa3\\xe5\\x8e\\x8b\\xe9\\x85\\x8d\\xe7\\xbd\\xae\\xe6\\x96\\x87\\xe4\\xbb\\xb6\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\"\\n    if [ -f ${DEST_DIR}/${FILENAME} ];then\\n        ln -snf ${DEST_DIR} ${DEST_DIR}/../current\\n        del_old\\n        echo -e \"[OK] \\xe4\\xb8\\x8b\\xe8\\xbd\\xbd\\xe5\\xae\\x8c\\xe6\\x88\\x90\"\\n    else\\n        echo -e \\'\\\\e[31m \\xe6\\x9c\\xaa\\xe6\\x89\\xbe\\xe5\\x88\\xb0\\xe9\\x85\\x8d\\xe7\\xbd\\xae\\xe6\\x96\\x87\\xe4\\xbb\\xb6 \\\\e[m\\'\\n        exit 1\\n    fi\\n}\\n\\nget_config\\n\\nEOF\\n'\n\n    var task_id = ecu.genId(\"task\")\n\n    var ret = ecu.startServerTask(agent_id, {\n        task_id: task_id,\n        name: \"conf_download\",\n        exec_type: \"shell\",\n        exec_body: conf_download,\n        timeout: 300, // 超时时间，超过超时时间，当前task会被kill -9 杀死\n        })  \n\n    var waitResult = ecu.waitServerTask(agent_id, task_id, 300)\n    output[\"debug\"][host_name] = waitResult\n\n    if (waitResult.exit_code !== 0){\n        is_success = false\n    }\n\n  })\n\n  output.success = is_success\n}\n\ntry {\n  main()\n} catch(e) {\n  output.error = e\n}\nctx.output(output)\n"
        },
        "descr": "ES2015 解析组件",
        "inputs": {
          "成功": {
            "program_br": "{var:__START__.output.program_br}",
            "region_value": "{var:__START__.output.region}",
            "time": "{var:获取配置的时间变量.output.time}"
          }
        },
        "name": "获取区服下的服务器并执行下载配置",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-condition",
        "config": {
          "array": false,
          "op": "字符串-相等"
        },
        "descr": "条件判断",
        "inputs": {
          "*": {
            "target": "true"
          },
          "获取区服下的服务器并执行下载配置": {
            "target": "true",
            "value": "{var:获取区服下的服务器并执行下载配置.output.success}"
          }
        },
        "name": "下载配置-成功",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-interpreter_ecmascript",
        "config": {
          "input_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"region_value\":{\"type\":\"string\",\"title\":\"区服名称\"},\"service_list\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"title\":\"服务列表\"},\"time_ver\":{\"type\":\"string\",\"title\":\"配置文件的版本变量\"}},\"required\":[\"region_value\",\"service_list\",\"time_ver\"]}",
          "output_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"success\":{\"type\":\"boolean\"}},\"required\":[\"success\"]}",
          "script": "// WorkflowRuntimeContext 类型对象暴露 workflow 运行时方法\nvar ctx = new WorkflowRuntimeContext()\nvar input = ctx.input() // 获取input数据\nvar ecu = ctx.getECU()\n// ctx.output({xxxx}) 输出\n\nvar service_list = input.service_list\nvar region_value = input.region_value\nvar time_ver = input.time_ver\nvar program_br = input.program_br\n\n\nvar output = {\n  debug: {},\n  error: \"\",\n  success: false\n}\n// 搜索出区服下的所有机器\nvar query = {\n    objects: [\"$conditions\"],\n    conditions: [{\n        field: \".indexes.cmdb_index-1ojgkr5s9jluq\",\n        op:\"=-\",\n        value: { \n                  conditions: [\n                  {\n                      field: \".inode.schema_id\",\n                      op: \"=\",\n                      value: \"cmdb_schema_x-xrbjlqi40big\"\n                  },                \n                  {\n                      field: \".indexes.cmdb_index-t9ul38dhptn3\",\n                      op:\"=\",\n                      value: region_value\n                  },\n              ],\n              objects: [\"$conditions\"],\n              multi: false\n          },\n    }, {\n        field: \"inode.schema_id\",\n        op:\"=\",\n        value: \"cmdb_schema_infra_server-0\" // 服务器\n    }],\n    selects: ['.']\n}\n\nvar ret = ecu.queryObjects(query)\n\n// 2. 查询区服下服务器的进程列表并执行停服\nvar is_success = true\nret.objects.forEach(function(server_item){\n    var query = {\n    objects: [\"$conditions\"],\n    conditions: [{\n        field: \".indexes.cmdb_index-server\",\n        op:\"=\",\n        value: server_item.inode.id,\n    }, {\n        field: \"inode.schema_id\",\n        op:\"=\",\n        value: \"cmdb_schema_x-2xmz0wfx00p3d\" // 进程\n    }],\n    selects: ['.',\n              '.indexes.cmdb_index-2vj4ybu227zju.indexes.cmdb_index-2ftsii172v5gm.inode.name']\n    }\n    var ret = ecu.queryObjects(query)\n    \n\n    var process_list = \"\"\n    ret.objects.forEach(function(process_item){\n        var service_name = process_item.indexes[\"cmdb_index-2vj4ybu227zju\"].indexes[\"cmdb_index-2ftsii172v5gm\"].inode.name\n        process_list += service_name + '_' + process_item.data.app_id + ' '\n    })\n\n    // 执行停服操作\n\n    var host_name = server_item.inode.name\n    var agent_id = server_item.indexes['cmdb_index-system_server'].inode.id\n\n    var set_conf_link = '#!/bin/bash\\n\\nsu - work <<\\'EOF\\'\\n\\nanynowtime=\"date +\\'%Y-%m-%d %H:%M:%S\\'\"\\nNOW=\"echo [\\\\`$anynowtime\\\\`][PID:$$]\"\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe5\\xbc\\x80\\xe5\\xa7\\x8b\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe6\\x97\\xb6\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82\\nfunction job_start\\n{\\n    echo \"`eval $NOW` job_start\"\\n}\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe6\\x89\\xa7\\xe8\\xa1\\x8c\\xe6\\x88\\x90\\xe5\\x8a\\x9f\\xe7\\x9a\\x84\\xe9\\x80\\xbb\\xe8\\xbe\\x91\\xe5\\x88\\x86\\xe6\\x94\\xaf\\xe5\\xa4\\x84\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82 \\nfunction job_success\\n{\\n    MSG=\"$*\"\\n    echo \"`eval $NOW` job_success:[$MSG]\"\\n    exit 0\\n}\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe6\\x89\\xa7\\xe8\\xa1\\x8c\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\\xe7\\x9a\\x84\\xe9\\x80\\xbb\\xe8\\xbe\\x91\\xe5\\x88\\x86\\xe6\\x94\\xaf\\xe5\\xa4\\x84\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82\\nfunction job_fail\\n{\\n    MSG=\"$*\"\\n    echo \"`eval $NOW` job_fail:[$MSG]\"\\n    exit 1\\n}\\n\\njob_start\\n\\n# \\xe4\\xb8\\xba0\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe7\\x8a\\xb6\\xe6\\x80\\x81\\xe4\\xb8\\xba\\xe6\\x89\\x8b\\xe5\\xb7\\xa5\\xe8\\xbf\\x90\\xe8\\xa1\\x8c, \\xe4\\xb8\\xba1\\xe5\\x9c\\xa8opsmind\\xe4\\xb8\\x8a\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\nRUN_ON_OPSMIND=1\\n\\nif [ $RUN_ON_OPSMIND -eq 0 ];then\\n    # \\xe6\\x89\\x8b\\xe5\\xb7\\xa5\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\n    if [ $# -lt 2 ]; then\\n        job_fail \\'USAGE PROCESS_LIST TIME\\'\\n    fi\\n    \\n    PROCESS_LIST=$1\\n    TIME=$2\\n    ####\\nelif [ $RUN_ON_OPSMIND -eq 1 ];then\\n    # \\xe5\\x9c\\xa8\\xe4\\xb8\\x8aopsmind\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe6\\x97\\xb6\\xe5\\x8a\\xa0\\xe8\\xbd\\xbd\\xe7\\x9a\\x84\\xe5\\x8f\\x98\\xe9\\x87\\x8f\\n    PROCESS_LIST=\"' + process_list + '\"\\n    TIME=' + time_ver + '\\nfi\\n\\n\\n\\nGAME_DIR=\"/home/data/hk4e\"\\nCOMPONENT_NAME=\"config\"\\nUPDATE_ROOT_DIR=\"/home/data/version_update\"\\nCURRENT_DIR=${UPDATE_ROOT_DIR}/${COMPONENT_NAME}/${TIME}\\n\\nLOG_FILE=\"/tmp/hk4e.conf.log.\"`date \\'+%s\\'`\\n\\n#\\xe5\\x8f\\x82\\xe6\\x95\\xb0\\xe9\\xaa\\x8c\\xe8\\xaf\\x81\\n\\nif [ -d $CURRENT_DIR ];then\\n        echo \"[Update Config] ==>  ${PROCESS} ....\"\\nelse\\n        echo -e \\'\\\\e[31m [ERROR] \\xe6\\x9c\\xaa\\xe6\\x89\\xbe\\xe5\\x88\\xb0\\xe6\\x9b\\xb4\\xe6\\x96\\xb0\\xe7\\x89\\x88\\xe6\\x9c\\xac  \\\\e[m\\'\\n        exit 1\\nfi\\n\\n#\\xe6\\x9b\\xb4\\xe6\\x96\\xb0\\xe9\\x85\\x8d\\xe7\\xbd\\xae\\n# PROCESS EXAMPLE gameserver_2009.2.1.1\\n\\nfor PROCESS_PID in $PROCESS_LIST; do\\n    process=`echo $PROCESS_PID | cut -d \"_\" -f 1`\\n    pid=`echo $PROCESS_PID | cut -d \"_\" -f 2`\\n    mkdir -p ${GAME_DIR}/${PROCESS_PID}\\n    if [ -L ${GAME_DIR}/${PROCESS_PID}/conf ];then\\n        rm -f ${GAME_DIR}/${PROCESS_PID}/conf\\n    else\\n        rm -rf ${GAME_DIR}/${PROCESS_PID}/conf\\n    fi\\n    ln -snf ${CURRENT_DIR}/${process}/conf ${GAME_DIR}/${PROCESS_PID}/conf\\n    cp -f ${CURRENT_DIR}/run ${GAME_DIR}/${PROCESS_PID}\\ndone\\n\\n#check update\\necho \"\" > $LOG_FILE\\nfor PROCESS_PID in $PROCESS_LIST;do\\n    process=`echo $PROCESS_PID | cut -d \"_\" -f 1`\\n    pid=`echo $PROCESS_PID | cut -d \"_\" -f 2`\\n    Smd5=`md5sum ${CURRENT_DIR}/${process}/conf/${process}.xml | awk \\'{print $1}\\'`\\n    Tmd5=`md5sum ${GAME_DIR}/${PROCESS_PID}/conf/${process}.xml | awk \\'{print $1}\\'`\\n    if [ \"$Smd5\" == \"$Tmd5\" ]; then\\n        echo \"${PROCESS_PID} SUCCESS\" >> $LOG_FILE\\n    else\\n        echo \"${PROCESS_PID} ERROR\" >>$LOG_FILE\\n    fi\\ndone\\n\\n#return\\nflag=`grep \"ERROR\" $LOG_FILE | wc -l`\\nif [ $flag -lt 0 ];then\\n    echo \"[ERROR] update conf\"\\n    cat $LOG_FILE\\n        job_fail \\'\\xe6\\x9b\\xb4\\xe6\\x96\\xb0\\xe9\\x85\\x8d\\xe7\\xbd\\xae\\xe6\\x96\\x87\\xe4\\xbb\\xb6\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\\'       \\nelse\\n    echo \"[SUCCESS] update conf\"\\n    cat $LOG_FILE\\nfi\\n\\nEOF\\n'\n\n    var task_id = ecu.genId(\"task\")\n\n    var ret = ecu.startServerTask(agent_id, {\n        task_id: task_id,\n        name: \"set_conf_link\",\n        exec_type: \"shell\",\n        exec_body: set_conf_link,\n        timeout: 300, // 超时时间，超过超时时间，当前task会被kill -9 杀死\n        })  \n\n    var waitResult = ecu.waitServerTask(agent_id, task_id, 300)\n    output[\"debug\"][host_name] = waitResult\n\n    if (waitResult.exit_code !== 0){\n        is_success = false\n    }      \n\n})\n\noutput[\"success\"] = is_success\n\nctx.output(output)"
        },
        "descr": "ES2015 解析组件",
        "inputs": {
          "停止服务-成功": {
            "region_value": "{var:__START__.output.region}",
            "service_list": "{var:__START__.output.process_list}",
            "time_ver": "{var:获取配置的时间变量.output.time}"
          }
        },
        "name": "发布配置",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-condition",
        "config": {
          "array": false,
          "op": "字符串-不相等"
        },
        "descr": "条件判断",
        "inputs": {
          "*": {
            "target": "true"
          },
          "获取区服下的服务器并执行下载配置": {
            "target": "true"
          }
        },
        "name": "下载配置-失败",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-interpreter_ecmascript",
        "config": {
          "input_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"region_value\":{\"type\":\"string\"},\"program_br\":{\"type\":\"string\"},\"version\":{\"type\":\"string\"}}}",
          "output_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"success\":{\"type\":\"boolean\"}},\"required\":[\"success\"]}",
          "script": "// WorkflowRuntimeContext 类型对象暴露 workflow 运行时方法\nvar ctx = new WorkflowRuntimeContext()\nvar input = ctx.input() // 获取input数据\nvar ecu = ctx.getECU()\nvar time = new Date().getTime()\n\nvar output = {\n    debug: {},\n    error: {},\n    success: false\n}\n\n// var ret = ecu.createObjects([{\n//   \"inode\": {\n//     \"schema_id\": \"cmdb_schema_schema_x-0\",\n//     \"name\": time + \"\",\n//   },\n//   \"data\": {\n//     \"data\": \"{\\\"type\\\":\\\"object\\\",\\\"title\\\":\\\"root\\\",\\\"properties\\\":{\\\"field_1\\\":{\\\"type\\\":\\\"string\\\"}},\\\"required\\\":[\\\"field_1\\\"]}\"\n//   },\n//   \"indexes\": {}\n// }])\n\nfunction main() {\n  var region_value = input.region_value\n  var program_br = input.program_br\n  var version = input.version\n\n  output[\"region_value\"] = region_value\n  output[\"program_br\"] = program_br\n  output[\"version\"] = version\n\n\n  // 1. 根据 region_value 索引，查找对应的业务子系统\n  var q1 = {\n    conditions: [\n      {\n        field: \"inode.schema_id\",\n        op: \"=\",\n        value: \"cmdb_schema_x-xrbjlqi40big\"\n      },\n      {\n        field: \"indexes.cmdb_index-t9ul38dhptn3\",\n        op: \"=\",\n        value: region_value\n      }\n    ],\n    objects:[\"$conditions\"],\n    selects: [\".\"],\n  }\n  var ret = ecu.queryObjects(q1)\n  var sids = []\n  ret.objects.forEach(function(obj) {\n    sids.push(obj.inode.id)\n  })\n  output.debug['q1'] = q1\n  output.debug['ret1'] = ret\n\n  // 2. 根据业务子系统，查找服务器\n  var q2 = {\n    conditions: [\n      {\n        field: \"inode.schema_id\",\n        op: \"=\",\n        value: \"cmdb_schema_infra_server-0\"\n      },\n      {\n        field: \"indexes.cmdb_index-1ojgkr5s9jluq\",\n        op: \"=-\",\n        value: sids\n      }\n    ],\n    objects:[\"$conditions\"],\n    selects: [\".\"],\n  }\n  ret = ecu.queryObjects(q2)\n  output.debug['ret2'] = ret\n  output.debug['q2'] = q2\n\n  var is_success = true\n  ret.objects.forEach(function(item) {\n    // TODO: 判断agent是否存在\n    // if (item.indexes['cmdb_index-system_server'] && item.indexes['cmdb_index-system_server'].inode.id) {\n\n    // }\n    var host_name = item.inode.name\n    var agent_id = item.indexes['cmdb_index-system_server'].inode.id\n\n    var bin_download = '#!/bin/bash\\n\\nsu - work <<\\'EOF\\'\\n\\nanynowtime=\"date +\\'%Y-%m-%d %H:%M:%S\\'\"\\nNOW=\"echo [\\\\`$anynowtime\\\\`][PID:$$]\"\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe5\\xbc\\x80\\xe5\\xa7\\x8b\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe6\\x97\\xb6\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82\\nfunction job_start\\n{\\n    echo \"`eval $NOW` job_start\"\\n}\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe6\\x89\\xa7\\xe8\\xa1\\x8c\\xe6\\x88\\x90\\xe5\\x8a\\x9f\\xe7\\x9a\\x84\\xe9\\x80\\xbb\\xe8\\xbe\\x91\\xe5\\x88\\x86\\xe6\\x94\\xaf\\xe5\\xa4\\x84\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82 \\nfunction job_success\\n{\\n    MSG=\"$*\"\\n    echo \"`eval $NOW` job_success:[$MSG]\"\\n    exit 0\\n}\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe6\\x89\\xa7\\xe8\\xa1\\x8c\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\\xe7\\x9a\\x84\\xe9\\x80\\xbb\\xe8\\xbe\\x91\\xe5\\x88\\x86\\xe6\\x94\\xaf\\xe5\\xa4\\x84\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82\\nfunction job_fail\\n{\\n    MSG=\"$*\"\\n    echo \"`eval $NOW` job_fail:[$MSG]\"\\n    exit 1\\n}\\n\\njob_start\\n\\n# \\xe4\\xb8\\xba0\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe7\\x8a\\xb6\\xe6\\x80\\x81\\xe4\\xb8\\xba\\xe6\\x89\\x8b\\xe5\\xb7\\xa5\\xe8\\xbf\\x90\\xe8\\xa1\\x8c, \\xe4\\xb8\\xba1\\xe5\\x9c\\xa8opsmind\\xe4\\xb8\\x8a\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\nRUN_ON_OPSMIND=1\\n\\nif [ $RUN_ON_OPSMIND -eq 0 ];then\\n    # \\xe6\\x89\\x8b\\xe5\\xb7\\xa5\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\n    if [ $# -lt 2 ]; then\\n        job_fail \\'USAGE PROGRAM_BR VERSION\\'\\n    fi\\n    \\n    # REGION_NAME=\"$1\"\\n    PROGRAM_BR=\"$1\"\\n    VERSION=\"$2\"\\n    ####\\nelif [ $RUN_ON_OPSMIND -eq 1 ];then\\n    # \\xe5\\x9c\\xa8\\xe4\\xb8\\x8aopsmind\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe6\\x97\\xb6\\xe5\\x8a\\xa0\\xe8\\xbd\\xbd\\xe7\\x9a\\x84\\xe5\\x8f\\x98\\xe9\\x87\\x8f\\n    # REGION_NAME={var:xxx}\\n    PROGRAM_BR=' + program_br + '\\n    VERSION=' + version + '\\nfi\\n\\n#\\xe6\\x9b\\xb4\\xe6\\x96\\xb0\\xe7\\xbb\\x84\\xe4\\xbb\\xb6\\xe7\\x9a\\x84\\xe5\\x90\\x8d\\xe6\\x88\\x90(config\\xe4\\xb8\\xba\\xe9\\x85\\x8d\\xe7\\xbd\\xae, program\\xe4\\xb8\\xba\\xe7\\xa8\\x8b\\xe5\\xba\\x8f, data\\xe4\\xb8\\xba\\xe6\\x95\\xb0\\xe5\\x80\\xbc)\\nCOMPONENT_NAME=\"program\"\\n####################\\nUPDATE_ROOT_DIR=\"/home/data/version_update\"\\nFILENAME=\"hk4e_output.tar.gz\"\\nFILENAME_MD5=\"hk4e_output.tar.gz.md5\"\\nCOMPONENT_DIR=${UPDATE_ROOT_DIR}/${COMPONENT_NAME}\\nDEST_DIR=${UPDATE_ROOT_DIR}/${COMPONENT_NAME}/${VERSION}\\n\\n\\n#\\xe5\\x88\\x9b\\xe5\\xbb\\xba\\xe7\\x9b\\xae\\xe5\\xbd\\x95\\n[ -d $DEST_DIR ] || mkdir -p $DEST_DIR\\n\\n#delete old version\\nfunction del_old {\\n        echo -e \"\\\\e[36m delete old version \\\\e[m\"\\n        target_list=`ls -t ${COMPONENT_DIR} | awk \\'{if(NR>10){print \\\\$1}}\\'`\\n        for item in  $target_list; do\\n                rm -rf ${COMPONENT_DIR}/$item\\n        done\\n}\\n\\n\\n#\\xe4\\xb8\\x8b\\xe8\\xbd\\xbd\\xe6\\x96\\x87\\xe4\\xbb\\xb6\\nfunction get_code {\\n    OSSUTIL_BIN_URL=oss://hk4e-trans/server_bin/hk4e_${PROGRAM_BR}/${FILENAME}.$VERSION\\n    OSSUTIL_MD5_URL=oss://hk4e-trans/server_bin/hk4e_${PROGRAM_BR}/${FILENAME_MD5}.$VERSION\\n    ossutil cp -f $OSSUTIL_BIN_URL ${DEST_DIR}/${FILENAME} || job_fail \"\\xe4\\xb8\\x8b\\xe8\\xbd\\xbd\\xe7\\xa8\\x8b\\xe5\\xba\\x8f\\xe6\\x96\\x87\\xe4\\xbb\\xb6\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\"\\n    ossutil cp -f $OSSUTIL_MD5_URL ${DEST_DIR}/${FILENAME_MD5} || job_fail \"\\xe4\\xb8\\x8b\\xe8\\xbd\\xbd\\xe7\\xa8\\x8b\\xe5\\xba\\x8fmd5\\xe6\\x96\\x87\\xe4\\xbb\\xb6\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\"\\n    \\n    #check md5\\n    cd ${DEST_DIR}\\n    MD5=`cat ${FILENAME}.md5 |awk \\'{print $1}\\'`\\n    FMD5=`md5sum ${FILENAME} | awk \\'{print $1}\\'`\\n\\n    if [ \"${MD5}\" == \"${FMD5}\" ]; then\\n            tar xf ${FILENAME} || job_fail \"\\xe8\\xa7\\xa3\\xe5\\x8e\\x8b\\xe9\\x85\\x8d\\xe7\\xbd\\xae\\xe6\\x96\\x87\\xe4\\xbb\\xb6\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\"\\n            ln -snf ${COMPONENT_DIR}/${VERSION} ${COMPONENT_DIR}/current\\n            echo -e \"[Download Program OK]\" \\n    else\\n            job_fail \"MD5\\xe7\\x9b\\x91\\xe6\\xb5\\x8b\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\"\\n    fi    \\n}\\n\\nget_code\\n\\nEOF\\n'\n\n    var task_id = ecu.genId(\"task\")\n\n    var ret = ecu.startServerTask(agent_id, {\n        task_id: task_id,\n        name: \"bin_download\",\n        exec_type: \"shell\",\n        exec_body: bin_download,\n        timeout: 300, // 超时时间，超过超时时间，当前task会被kill -9 杀死\n        })  \n\n    var waitResult = ecu.waitServerTask(agent_id, task_id, 300)\n    output[\"debug\"][host_name] = waitResult\n\n    if (waitResult.exit_code !== 0){\n        is_success = false\n    }\n\n  })\n\n  output.success = is_success\n}\n\ntry {\n  main()\n} catch(e) {\n  output.error = e\n}\nctx.output(output)\n"
        },
        "descr": "ES2015 解析组件",
        "inputs": {
          "下载配置-成功": {
            "program_br": "{var:__START__.output.program_br}",
            "region_value": "{var:__START__.output.region}",
            "version": "{var:__START__.output.program_version}"
          }
        },
        "name": "获取区服下的机器并下载程序",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-condition",
        "config": {
          "array": false,
          "op": "字符串-相等"
        },
        "descr": "条件判断",
        "inputs": {
          "*": {
            "target": "true"
          },
          "获取区服下的机器并下载程序": {
            "target": "true",
            "value": "{var:获取区服下的机器并下载程序.output.success}"
          }
        },
        "name": "下载程序-成功",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-condition",
        "config": {
          "array": false,
          "op": "字符串-不相等"
        },
        "descr": "条件判断",
        "inputs": {
          "*": {
            "target": "true"
          },
          "获取区服下的机器并下载程序": {
            "target": "true",
            "value": "{var:获取区服下的机器并下载程序.output.success}"
          }
        },
        "name": "下载程序-失败",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-interpreter_ecmascript",
        "config": {
          "input_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"service_list\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"title\":\"更新的服务列表\"},\"region_value\":{\"type\":\"string\",\"title\":\"区服名称\"}},\"required\":[\"service_list\",\"region_value\"]}",
          "output_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"success\":{\"type\":\"boolean\"}},\"required\":[\"success\"]}",
          "script": "// WorkflowRuntimeContext 类型对象暴露 workflow 运行时方法\nvar ctx = new WorkflowRuntimeContext()\nvar input = ctx.input() // 获取input数据\nvar ecu = ctx.getECU()\n// ctx.output({xxxx}) 输出\n\nvar service_list = input.service_list\nvar region_value = input.region_value\n\nvar stop_service_list = [\"gateserver\", \n                         \"gameserver\", \n                         \"multiserver\", \n                         \"muipserver\", \n                         \"dbgate\", \n                         \"nodeserver\", \n                         \"dispatch\", \n                         \"httpproxy\"]\n\nvar output = {\n  debug: {},\n  error: \"\",\n  success: false\n}\n\nvar step_success = true\nstop_service_list.forEach(function(item){\n  if (service_list.indexOf(item) >= 0){\n    // 取得机器和对应的进程\n    // 1. 查询区服下服务器列表\n    var query = {\n      objects: [\"$conditions\"],\n      conditions: [{\n          field: \".indexes.cmdb_index-1ojgkr5s9jluq\",\n          op:\"=-\",\n          value: { \n                    conditions: [\n                    {\n                        field: \".inode.schema_id\",\n                        op: \"=\",\n                        value: \"cmdb_schema_x-xrbjlqi40big\"\n                    },                \n                    {\n                        field: \".indexes.cmdb_index-t9ul38dhptn3\",\n                        op:\"=\",\n                        value: region_value\n                    },\n                ],\n                objects: [\"$conditions\"],\n                multi: false\n            },\n      }, {\n          field: \"inode.schema_id\",\n          op:\"=\",\n          value: \"cmdb_schema_infra_server-0\" // 服务器\n      }],\n      selects: ['.']\n  }\n  var ret = ecu.queryObjects(query)\n  output[\"debug\"][\"lookup_server\"] = ret\n\n  // 2. 查询区服下服务器的进程列表并执行停服\n  var is_success = true\n  ret.objects.forEach(function(server_item){\n      var query = {\n        objects: [\"$conditions\"],\n        conditions: [{\n            field: \".indexes.cmdb_index-server\",\n            op:\"=\",\n            value: server_item.inode.id,\n        }, {\n            field: \"inode.schema_id\",\n            op:\"=\",\n            value: \"cmdb_schema_x-2xmz0wfx00p3d\" // 进程\n        },{\n            field: \".indexes.cmdb_index-2vj4ybu227zju\",\n            op:\"=-\",\n            value: { \n                  conditions: [\n                  {\n                      field: \".inode.schema_id\",\n                      op: \"=\",\n                      value: \"cmdb_schema_x-lk22lxvs31sd\"\n                  },                \n                  {\n                      field: \".indexes.cmdb_index-2ftsii172v5gm\",\n                      op:\"=-\",\n                      value: { \n                          conditions: [\n                          {\n                              field: \".inode.schema_id\",\n                              op: \"=\",\n                              value: \"cmdb_schema_x-1x6pi7ibv15vv\"\n                          },                \n                          {\n                              field: \".inode.name\",\n                              op:\"=\",\n                              value: item\n                          }\n                      ],\n                      objects: [\"$conditions\"],\n                      multi: false\n                    }\n                  },\n              ],\n              objects: [\"$conditions\"],\n              multi: false\n            } // 所属服务编排\n          }],\n        selects: ['.',\n                  '.indexes.cmdb_index-2vj4ybu227zju.indexes.cmdb_index-2ftsii172v5gm.inode.name']\n      }\n      var ret = ecu.queryObjects(query)\n      \n\n      var process_list = \"\"\n      ret.objects.forEach(function(process_item){\n        process_list += item + '_' + process_item.data.app_id + ' '\n      })\n\n      // 执行停服操作\n\n      var host_name = server_item.inode.name\n      var agent_id = server_item.indexes['cmdb_index-system_server'].inode.id\n      output[\"debug\"][host_name] = process_list\n      var stop_script = '#!/bin/bash\\n\\nsu - work <<\\'EOF\\'\\n\\nexport PATH=$PATH:/usr/local/bin\\nanynowtime=\"date +\\'%Y-%m-%d %H:%M:%S\\'\"\\nNOW=\"echo [\\\\`$anynowtime\\\\`][PID:$$]\"\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe5\\xbc\\x80\\xe5\\xa7\\x8b\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe6\\x97\\xb6\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82\\nfunction job_start\\n{\\n    echo \"`eval $NOW` job_start\"\\n}\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe6\\x89\\xa7\\xe8\\xa1\\x8c\\xe6\\x88\\x90\\xe5\\x8a\\x9f\\xe7\\x9a\\x84\\xe9\\x80\\xbb\\xe8\\xbe\\x91\\xe5\\x88\\x86\\xe6\\x94\\xaf\\xe5\\xa4\\x84\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82 \\nfunction job_success\\n{\\n    MSG=\"$*\"\\n    echo \"`eval $NOW` job_success:[$MSG]\"\\n    exit 0\\n}\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe6\\x89\\xa7\\xe8\\xa1\\x8c\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\\xe7\\x9a\\x84\\xe9\\x80\\xbb\\xe8\\xbe\\x91\\xe5\\x88\\x86\\xe6\\x94\\xaf\\xe5\\xa4\\x84\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82\\nfunction job_fail\\n{\\n    MSG=\"$*\"\\n    echo \"`eval $NOW` job_fail:[$MSG]\"\\n    exit 1\\n}\\n\\nfunction process_stop\\n{\\n    cd ${GAME_DIR} || job_fail \"\\xe8\\xbf\\x9b\\xe5\\x85\\xa5\\xe6\\xb8\\xb8\\xe6\\x88\\x8f\\xe7\\x9b\\xae\\xe5\\xbd\\x95\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\"\\n    PROCESS_PID=\"$1\"\\n    if [ -f \"${PROCESS_PID}/supervise/status\" ]; then\\n        cd ${PROCESS_PID}\\n        \\n        # \\xe6\\x9c\\x8d\\xe5\\x8a\\xa1\\xe5\\x9c\\xa8\\xe5\\x90\\xaf\\xe5\\x8a\\xa8, \\xe5\\x85\\x88svc -d \\xe5\\x86\\x8d\\xe5\\x85\\xb3\\xe9\\x97\\xadsupervise\\n        # \\xe5\\x88\\xa4\\xe6\\x96\\xad\\xe6\\x9c\\x8d\\xe5\\x8a\\xa1\\xe6\\xb2\\xa1\\xe6\\x9c\\x89\\xe5\\x90\\xaf\\xe5\\x8a\\xa8, \\xe5\\x81\\x9c\\xe6\\xad\\xa2supervise\\n        # \\xe5\\x88\\xa4\\xe6\\x96\\xadsupervise\\xe6\\xb2\\xa1\\xe6\\x9c\\x89\\xe5\\x90\\xaf\\xe5\\x8a\\xa8, \\xe7\\x9b\\xb4\\xe6\\x8e\\xa5\\xe9\\x80\\x80\\xe5\\x87\\xba\\n        \\n        svstat . | grep \"supervise not running\" &> /dev/null\\n        if [ $? -eq 0 ];then \\n            echo \"\\xe8\\xbf\\x9b\\xe7\\xa8\\x8b${PROCESS_PID}\\xe6\\xb2\\xa1\\xe6\\x9c\\x89\\xe8\\xbf\\x90\\xe8\\xa1\\x8c, \\xe8\\xb7\\xb3\\xe8\\xbf\\x87...\"\\n            return 0\\n        fi\\n        \\n                # \\xe5\\x8c\\x85\\xe5\\x90\\xabup (pid 6031) 51 seconds, want down | up (pid 6031) 51 seconds \\xe4\\xb8\\xa4\\xe7\\xa7\\x8d\\xe6\\x83\\x85\\xe5\\x86\\xb5\\n        svstat . | egrep -E \"up.*seconds\" &> /dev/null\\n        if [ $? -eq 0 ]; then\\n            echo \"\\xe5\\x90\\x91${PROCESS_PID}\\xe5\\x8f\\x91\\xe9\\x80\\x81svc -d .\"\\n            [ -f \"/usr/local/bin/svc\" ] || job_fail \"\\xe5\\x90\\x91${PROCESS_PID}\\xe5\\x8f\\x91\\xe9\\x80\\x81svc -d .\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5, \\xe6\\xb2\\xa1\\xe6\\x9c\\x89\\xe5\\xae\\x89\\xe8\\xa3\\x85svc\\xe5\\x91\\xbd\\xe4\\xbb\\xa4\"\\n            ret=$(svc -d . 2>&1)        \\n\\n            echo $ret | grep \"unable to control\" && job_fail \"\\xe5\\x81\\x9c\\xe6\\xad\\xa2${PROCESS_PID}\\xe8\\xbf\\x9b\\xe7\\xa8\\x8b\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\"\\n            TIMEOUT=100\\n            TIMEOUT_RECORD=${TIMEOUT}\\n            isOK=false\\n            while [ ${TIMEOUT} -gt 0 ];\\n            do \\n                echo \"$PROCESS_PID stopping\"\\n                sleep 1\\n                svstat .|egrep -E \"down [0-9]+ seconds, normally up$\" && isOK=true\\n                if [ $isOK == true ]; then break; fi\\n                let TIMEOUT-=1\\n            done;\\n            # \\xe5\\x88\\xa4\\xe6\\x96\\xad\\xe5\\x81\\x9c\\xe6\\xad\\xa2\\xe7\\xbb\\x93\\xe6\\x9e\\x9c\\n            if [ $isOK == true ]; then\\n                echo \"$PROCESS_PID stopped\"\\n                /usr/local/bin/svc -x . 2>&1\\n                svstat . | grep \"supervise not running\" || job_fail \"\\xe5\\x81\\x9c\\xe6\\xad\\xa2${PROCESS_PID}supervise\\xe5\\xae\\x88\\xe6\\x8a\\xa4\\xe8\\xbf\\x9b\\xe7\\xa8\\x8b\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\"\\n                return 0\\n            else\\n                job_fail \"\\xe7\\xbb\\x8f\\xe8\\xbf\\x87${TIMEOUT_RECORD}\\xe7\\xa7\\x92\\xe5\\x90\\x8e, \\xe5\\x81\\x9c\\xe6\\xad\\xa2${PROCESS_PID} \\xe4\\xbb\\x8d\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\"\\n            fi            \\n        fi\\n        \\n        svstat . |egrep -E \"down [0-9]+ seconds, normally up$\"\\n        if [ $? -eq 0 ]; then\\n            ret=$(svc -x . 2>&1)\\n            echo $ret\\n            svstat . | grep \"supervise not running\" && return 0\\n        fi\\n        job_fail \"\\xe6\\x9c\\xaa\\xe7\\x9f\\xa5\\xe9\\x94\\x99\\xe8\\xaf\\xaf\"\\n    fi        \\n}\\n\\njob_start\\n\\n# \\xe4\\xb8\\xba0\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe7\\x8a\\xb6\\xe6\\x80\\x81\\xe4\\xb8\\xba\\xe6\\x89\\x8b\\xe5\\xb7\\xa5\\xe8\\xbf\\x90\\xe8\\xa1\\x8c, \\xe4\\xb8\\xba1\\xe5\\x9c\\xa8opsmind\\xe4\\xb8\\x8a\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\nRUN_ON_OPSMIND=1\\n\\nif [ $RUN_ON_OPSMIND -eq 0 ];then\\n    # \\xe6\\x89\\x8b\\xe5\\xb7\\xa5\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\n    if [ $# -lt 1 ]; then\\n        job_fail \\'USAGE PROCESS_LIST\\'\\n    fi\\n    \\n    PROCESS_LIST=$1\\n    ####\\nelif [ $RUN_ON_OPSMIND -eq 1 ];then\\n    # \\xe5\\x9c\\xa8\\xe4\\xb8\\x8aopsmind\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe6\\x97\\xb6\\xe5\\x8a\\xa0\\xe8\\xbd\\xbd\\xe7\\x9a\\x84\\xe5\\x8f\\x98\\xe9\\x87\\x8f\\n    PROCESS_LIST=\"' + process_list + '\"\\nfi\\n\\n\\n\\nGAME_DIR=\"/home/data/hk4e\"\\n\\n\\nLOG_FILE=\"/tmp/hk4e.conf.log.\"`date \\'+%s\\'`\\n\\n\\n#\\xe6\\x9b\\xb4\\xe6\\x96\\xb0\\xe9\\x85\\x8d\\xe7\\xbd\\xae\\n# PROCESS EXAMPLE gameserver_2009.2.1.1\\n\\nfor PROCESS_PID in $PROCESS_LIST; do\\n    process=`echo $PROCESS_PID | cut -d \"_\" -f 1`\\n    pid=`echo $PROCESS_PID | cut -d \"_\" -f 2`\\n    echo \"Shutdown $process [$pid]\"\\n    mkdir -p ${GAME_DIR}\\n    cd ${GAME_DIR} || job_fail \"\\xe8\\xbf\\x9b\\xe5\\x85\\xa5\\xe6\\xb8\\xb8\\xe6\\x88\\x8f\\xe7\\x9b\\xae\\xe5\\xbd\\x95\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5#2\" \\n    process_stop $PROCESS_PID\\ndone\\n\\nEOF\\n'\n  \n      var task_id = ecu.genId(\"task\")\n  \n      var ret = ecu.startServerTask(agent_id, {\n          task_id: task_id,\n          name: \"stop_script\",\n          exec_type: \"shell\",\n          exec_body: stop_script,\n          timeout: 300, // 超时时间，超过超时时间，当前task会被kill -9 杀死\n          })  \n  \n      var waitResult = ecu.waitServerTask(agent_id, task_id, 300)\n      output[\"debug\"][host_name] = waitResult\n      output[\"debug\"][host_name][\"process_list\"] = process_list\n  \n      if (waitResult.exit_code !== 0){\n          is_success = false\n      }      \n\n    })\n    if (is_success === false){\n      step_success = false\n    }\n\n  }\n})\n\noutput.success = step_success\n\nctx.output(output)"
        },
        "descr": "ES2015 解析组件",
        "inputs": {
          "*": {},
          "下载程序-成功": {
            "region_value": "{var:__START__.output.region}",
            "service_list": "{var:__START__.output.process_list}"
          }
        },
        "name": "停止服务",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-condition",
        "config": {
          "array": false,
          "op": "字符串-相等"
        },
        "descr": "条件判断",
        "inputs": {
          "*": {
            "target": "true"
          },
          "停止服务": {
            "target": "true",
            "value": "{var:停止服务.output.success}"
          }
        },
        "name": "停止服务-成功",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-condition",
        "config": {
          "array": false,
          "op": "字符串-不相等"
        },
        "descr": "条件判断",
        "inputs": {
          "*": {
            "target": "true"
          },
          "停止服务": {
            "target": "true",
            "value": "{var:停止服务.output.success}"
          }
        },
        "name": "停止服务-失败",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-interpreter_ecmascript",
        "config": {
          "input_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"region_value\":{\"type\":\"string\"},\"service_list\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"program_br\":{\"type\":\"string\"},\"version\":{\"type\":\"string\"}},\"required\":[\"region_value\",\"service_list\",\"program_br\",\"version\"]}",
          "output_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"success\":{\"type\":\"boolean\"}},\"required\":[\"success\"]}",
          "script": "// WorkflowRuntimeContext 类型对象暴露 workflow 运行时方法\nvar ctx = new WorkflowRuntimeContext()\nvar input = ctx.input() // 获取input数据\nvar ecu = ctx.getECU()\n// ctx.output({xxxx}) 输出\n\nvar service_list = input.service_list\nvar region_value = input.region_value\nvar program_br = input.program_br\nvar program_version = input.version\n\n\nvar output = {\n  debug: {},\n  error: \"\",\n  success: false\n}\n// 搜索出区服下的所有机器\nvar query = {\n    objects: [\"$conditions\"],\n    conditions: [{\n        field: \".indexes.cmdb_index-1ojgkr5s9jluq\",\n        op:\"=-\",\n        value: { \n                  conditions: [\n                  {\n                      field: \".inode.schema_id\",\n                      op: \"=\",\n                      value: \"cmdb_schema_x-xrbjlqi40big\"\n                  },                \n                  {\n                      field: \".indexes.cmdb_index-t9ul38dhptn3\",\n                      op:\"=\",\n                      value: region_value\n                  },\n              ],\n              objects: [\"$conditions\"],\n              multi: false\n          },\n    }, {\n        field: \"inode.schema_id\",\n        op:\"=\",\n        value: \"cmdb_schema_infra_server-0\" // 服务器\n    }],\n    selects: ['.']\n}\n\nvar ret = ecu.queryObjects(query)\n\n// 2. 查询区服下服务器的进程列表并执行停服\nvar is_success = true\nret.objects.forEach(function(server_item){\n    var query = {\n    objects: [\"$conditions\"],\n    conditions: [{\n        field: \".indexes.cmdb_index-server\",\n        op:\"=\",\n        value: server_item.inode.id,\n    }, {\n        field: \"inode.schema_id\",\n        op:\"=\",\n        value: \"cmdb_schema_x-2xmz0wfx00p3d\" // 进程\n    }],\n    selects: ['.',\n              '.indexes.cmdb_index-2vj4ybu227zju.indexes.cmdb_index-2ftsii172v5gm.inode.name']\n    }\n    var ret = ecu.queryObjects(query)\n    \n\n    var process_list = \"\"\n    ret.objects.forEach(function(process_item){\n        var service_name = process_item.indexes[\"cmdb_index-2vj4ybu227zju\"].indexes[\"cmdb_index-2ftsii172v5gm\"].inode.name\n        process_list += service_name + '_' + process_item.data.app_id + ' '\n    })\n\n    // 执行停服操作\n\n    var host_name = server_item.inode.name\n    var agent_id = server_item.indexes['cmdb_index-system_server'].inode.id\n\n    var set_program_link = '#!/bin/bash\\n\\nsu - work <<\\'EOF\\'\\n\\nanynowtime=\"date +\\'%Y-%m-%d %H:%M:%S\\'\"\\nNOW=\"echo [\\\\`$anynowtime\\\\`][PID:$$]\"\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe5\\xbc\\x80\\xe5\\xa7\\x8b\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe6\\x97\\xb6\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82\\nfunction job_start\\n{\\n    echo \"`eval $NOW` job_start\"\\n}\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe6\\x89\\xa7\\xe8\\xa1\\x8c\\xe6\\x88\\x90\\xe5\\x8a\\x9f\\xe7\\x9a\\x84\\xe9\\x80\\xbb\\xe8\\xbe\\x91\\xe5\\x88\\x86\\xe6\\x94\\xaf\\xe5\\xa4\\x84\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82 \\nfunction job_success\\n{\\n    MSG=\"$*\"\\n    echo \"`eval $NOW` job_success:[$MSG]\"\\n    exit 0\\n}\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe6\\x89\\xa7\\xe8\\xa1\\x8c\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\\xe7\\x9a\\x84\\xe9\\x80\\xbb\\xe8\\xbe\\x91\\xe5\\x88\\x86\\xe6\\x94\\xaf\\xe5\\xa4\\x84\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82\\nfunction job_fail\\n{\\n    MSG=\"$*\"\\n    echo \"`eval $NOW` job_fail:[$MSG]\"\\n    exit 1\\n}\\n\\njob_start\\n\\n# \\xe4\\xb8\\xba0\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe7\\x8a\\xb6\\xe6\\x80\\x81\\xe4\\xb8\\xba\\xe6\\x89\\x8b\\xe5\\xb7\\xa5\\xe8\\xbf\\x90\\xe8\\xa1\\x8c, \\xe4\\xb8\\xba1\\xe5\\x9c\\xa8opsmind\\xe4\\xb8\\x8a\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\nRUN_ON_OPSMIND=1\\n\\nif [ $RUN_ON_OPSMIND -eq 0 ];then\\n    # \\xe6\\x89\\x8b\\xe5\\xb7\\xa5\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\n    if [ $# -lt 2 ]; then\\n        job_fail \\'USAGE PROCESS_LIST VERSION\\'\\n    fi\\n    \\n    PROCESS_LIST=$1\\n    VERSION=$2\\n    ####\\nelif [ $RUN_ON_OPSMIND -eq 1 ];then\\n    # \\xe5\\x9c\\xa8\\xe4\\xb8\\x8aopsmind\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe6\\x97\\xb6\\xe5\\x8a\\xa0\\xe8\\xbd\\xbd\\xe7\\x9a\\x84\\xe5\\x8f\\x98\\xe9\\x87\\x8f\\n    PROCESS_LIST=\"' + process_list + '\"\\n    VERSION=' + program_version + '\\nfi\\n\\n\\n\\nGAME_DIR=\"/home/data/hk4e\"\\nCOMPONENT_NAME=\"program\"\\nUPDATE_ROOT_DIR=\"/home/data/version_update\"\\nCURRENT_DIR=${UPDATE_ROOT_DIR}/${COMPONENT_NAME}/${VERSION}\\n\\nLOG_FILE=\"/tmp/hk4e.program.log.\"`date \\'+%s\\'`\\n\\n#\\xe5\\x8f\\x82\\xe6\\x95\\xb0\\xe9\\xaa\\x8c\\xe8\\xaf\\x81\\n\\nif [ -d $CURRENT_DIR ];then\\n        echo \"[Update Config] ==>  ${PROCESS} ....\"\\nelse\\n        echo -e \\'\\\\e[31m [ERROR] \\xe6\\x9c\\xaa\\xe6\\x89\\xbe\\xe5\\x88\\xb0\\xe6\\x9b\\xb4\\xe6\\x96\\xb0\\xe7\\x89\\x88\\xe6\\x9c\\xac  \\\\e[m\\'\\n        exit 1\\nfi\\n\\n#\\xe6\\x9b\\xb4\\xe6\\x96\\xb0\\xe9\\x85\\x8d\\xe7\\xbd\\xae\\n# PROCESS EXAMPLE gameserver_2009.2.1.1\\n\\nfor PROCESS_PID in $PROCESS_LIST; do\\n    process=`echo $PROCESS_PID | cut -d \"_\" -f 1`\\n    pid=`echo $PROCESS_PID | cut -d \"_\" -f 2`\\n    if [ -L ${GAME_DIR}/${PROCESS_PID}/${process} ];then\\n        rm -f ${GAME_DIR}/${PROCESS_PID}/${process}\\n    else\\n        rm -rf ${GAME_DIR}/${PROCESS_PID}/${process}\\n    fi\\n    \\n    ln -snf ${CURRENT_DIR}/hk4e_output/${process}/${process} ${GAME_DIR}/${PROCESS_PID}/${process}\\n    ln -snf ${CURRENT_DIR}/hk4e_output/lib ${GAME_DIR}/${PROCESS_PID}/lib\\ndone\\n\\n#check update\\nfor PROCESS_PID in $PROCESS_LIST;do\\n    process=`echo $PROCESS_PID | cut -d \"_\" -f 1`\\n    pid=`echo $PROCESS_PID | cut -d \"_\" -f 2`\\n\\n    cd ${GAME_DIR}/${PROCESS_PID}\\n    code_version=`./${process} -v | grep code_version |awk  \\'{print $2}\\'`\\n    if [ \"$code_version\" == \"$VERSION\" ]; then\\n        echo \"${PROCESS_PID} success [$code_version]\" >> $LOG_FILE\\n        # \\xe5\\x88\\xa0\\xe9\\x99\\xa4patch\\n        [ -d ${GAME_DIR}/${PROCESS_PID}/patch ] && rm -r ${GAME_DIR}/${PROCESS_PID}/patch\\n    else\\n        echo \"${PROCESS_PID} ERROR [$code_version]\" >>$Check_log\\n    fi\\ndone\\n\\n#return\\nflag=`grep \"ERROR\" $LOG_FILE | wc -l`\\nif [ $flag -lt 0 ];then\\n        echo \"[ERROR] update conf\"\\n        cat $LOG_FILE\\n        job_fail \\'\\xe6\\x9b\\xb4\\xe6\\x96\\xb0\\xe9\\x85\\x8d\\xe7\\xbd\\xae\\xe6\\x96\\x87\\xe4\\xbb\\xb6\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\\'\\nelse\\n        echo \"[SUCCESS] update conf\"\\n        cat $LOG_FILE\\nfi\\n\\nEOF\\n'\n\n    var task_id = ecu.genId(\"task\")\n\n    var ret = ecu.startServerTask(agent_id, {\n        task_id: task_id,\n        name: \"set_program_link\",\n        exec_type: \"shell\",\n        exec_body: set_program_link,\n        timeout: 300, // 超时时间，超过超时时间，当前task会被kill -9 杀死\n        })  \n\n    var waitResult = ecu.waitServerTask(agent_id, task_id, 300)\n    output[\"debug\"][host_name] = waitResult\n\n    if (waitResult.exit_code !== 0){\n        is_success = false\n    }      \n\n})\n\noutput[\"success\"] = is_success\n\nctx.output(output)"
        },
        "descr": "ES2015 解析组件",
        "inputs": {
          "发布配置-成功": {
            "program_br": "{var:__START__.output.program_br}",
            "region_value": "{var:__START__.output.region}",
            "service_list": "{var:__START__.output.process_list}",
            "version": "{var:__START__.output.program_version}"
          }
        },
        "name": "发布程序",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-condition",
        "config": {
          "array": false,
          "op": "字符串-相等"
        },
        "descr": "条件判断",
        "inputs": {
          "*": {
            "target": "true"
          },
          "发布配置": {
            "target": "true",
            "value": "{var:发布配置.output.success}"
          }
        },
        "name": "发布配置-成功",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-condition",
        "config": {
          "array": false,
          "op": "字符串-不相等"
        },
        "descr": "条件判断",
        "inputs": {
          "*": {
            "target": "true"
          },
          "发布配置": {
            "target": "true",
            "value": "{var:发布配置.output.success}"
          }
        },
        "name": "发布配置-失败",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-condition",
        "config": {
          "array": false,
          "op": "字符串-相等"
        },
        "descr": "条件判断",
        "inputs": {
          "*": {},
          "发布程序": {
            "target": "true",
            "value": "{var:发布程序.output.success}"
          }
        },
        "name": "发布程序-成功",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-condition",
        "config": {
          "array": false,
          "op": "字符串-不相等"
        },
        "descr": "条件判断",
        "inputs": {
          "*": {
            "target": "true"
          },
          "发布程序": {
            "target": "true",
            "value": "{var:发布程序.output.success}"
          }
        },
        "name": "发布程序-失败",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-interpreter_ecmascript",
        "config": {
          "input_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"service_list\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"title\":\"更新的服务列表\"},\"region_value\":{\"type\":\"string\",\"title\":\"区服名称\"}},\"required\":[\"service_list\",\"region_value\"]}",
          "output_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"success\":{\"type\":\"boolean\"}},\"required\":[\"success\"]}",
          "script": "// WorkflowRuntimeContext 类型对象暴露 workflow 运行时方法\nvar ctx = new WorkflowRuntimeContext()\nvar input = ctx.input() // 获取input数据\nvar ecu = ctx.getECU()\n// ctx.output({xxxx}) 输出\n\nvar service_list = input.service_list\nvar region_value = input.region_value\n\nvar start_service_list = [\"nodeserver\", \n                          \"dbgate\",\n                          \"muipserver\",\n                          \"multiserver\",\n                          \"gameserver\",\n                          \"gateserver\",\n                          \"dispatch\"]\n\nvar output = {\n  debug: {},\n  error: \"\",\n  success: false\n}\n\nvar step_success = true\nstart_service_list.forEach(function(item){\n  if (service_list.indexOf(item) >= 0){\n    // 取得机器和对应的进程\n    // 1. 查询区服下服务器列表\n    var query = {\n      objects: [\"$conditions\"],\n      conditions: [{\n          field: \".indexes.cmdb_index-1ojgkr5s9jluq\",\n          op:\"=-\",\n          value: { \n                    conditions: [\n                    {\n                        field: \".inode.schema_id\",\n                        op: \"=\",\n                        value: \"cmdb_schema_x-xrbjlqi40big\"\n                    },                \n                    {\n                        field: \".indexes.cmdb_index-t9ul38dhptn3\",\n                        op:\"=\",\n                        value: region_value\n                    },\n                ],\n                objects: [\"$conditions\"],\n                multi: false\n            },\n      }, {\n          field: \"inode.schema_id\",\n          op:\"=\",\n          value: \"cmdb_schema_infra_server-0\" // 服务器\n      }],\n      selects: ['.']\n  }\n  var ret = ecu.queryObjects(query)\n  output[\"debug\"][\"lookup_server\"] = ret\n\n  // 2. 查询区服下服务器的进程列表并执行停服\n  var is_success = true\n  ret.objects.forEach(function(server_item){\n      var query = {\n        objects: [\"$conditions\"],\n        conditions: [{\n            field: \".indexes.cmdb_index-server\",\n            op:\"=\",\n            value: server_item.inode.id,\n        }, {\n            field: \"inode.schema_id\",\n            op:\"=\",\n            value: \"cmdb_schema_x-2xmz0wfx00p3d\" // 进程\n        },{\n          field: \".indexes.cmdb_index-2vj4ybu227zju\",\n          op:\"=-\",\n          value: { \n                conditions: [\n                {\n                    field: \".inode.schema_id\",\n                    op: \"=\",\n                    value: \"cmdb_schema_x-lk22lxvs31sd\"\n                },                \n                {\n                    field: \".indexes.cmdb_index-2ftsii172v5gm\",\n                    op:\"=-\",\n                    value: { \n                        conditions: [\n                        {\n                            field: \".inode.schema_id\",\n                            op: \"=\",\n                            value: \"cmdb_schema_x-1x6pi7ibv15vv\"\n                        },                \n                        {\n                            field: \".inode.name\",\n                            op:\"=\",\n                            value: item\n                        }\n                    ],\n                    objects: [\"$conditions\"],\n                    multi: false\n                  }\n                },\n            ],\n            objects: [\"$conditions\"],\n            multi: false\n          } // 所属服务编排\n        }],\n        selects: ['.',\n              '.indexes.cmdb_index-2vj4ybu227zju.indexes.cmdb_index-2ftsii172v5gm.inode.name']\n      }\n      var ret = ecu.queryObjects(query)\n      \n\n      var process_list = \"\"\n      ret.objects.forEach(function(process_item){\n        var service_name = process_item.indexes[\"cmdb_index-2vj4ybu227zju\"].indexes[\"cmdb_index-2ftsii172v5gm\"].inode.name\n        process_list += service_name + '_' + process_item.data.app_id + ' '\n      })\n\n      // 执行停服操作\n\n      var host_name = server_item.inode.name\n      var agent_id = server_item.indexes['cmdb_index-system_server'].inode.id\n  \n      var start_script = '#!/bin/bash\\n\\nsu - work <<\\'EOF\\'\\n\\nexport PATH=$PATH:/usr/local/bin\\nanynowtime=\"date +\\'%Y-%m-%d %H:%M:%S\\'\"\\nNOW=\"echo [\\\\`$anynowtime\\\\`][PID:$$]\"\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe5\\xbc\\x80\\xe5\\xa7\\x8b\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe6\\x97\\xb6\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82\\nfunction job_start\\n{\\n    echo \"`eval $NOW` job_start\"\\n}\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe6\\x89\\xa7\\xe8\\xa1\\x8c\\xe6\\x88\\x90\\xe5\\x8a\\x9f\\xe7\\x9a\\x84\\xe9\\x80\\xbb\\xe8\\xbe\\x91\\xe5\\x88\\x86\\xe6\\x94\\xaf\\xe5\\xa4\\x84\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82 \\nfunction job_success\\n{\\n    MSG=\"$*\"\\n    echo \"`eval $NOW` job_success:[$MSG]\"\\n    exit 0\\n}\\n\\n##### \\xe5\\x8f\\xaf\\xe5\\x9c\\xa8\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe6\\x89\\xa7\\xe8\\xa1\\x8c\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\\xe7\\x9a\\x84\\xe9\\x80\\xbb\\xe8\\xbe\\x91\\xe5\\x88\\x86\\xe6\\x94\\xaf\\xe5\\xa4\\x84\\xe8\\xb0\\x83\\xe7\\x94\\xa8\\xef\\xbc\\x8c\\xe6\\x89\\x93\\xe5\\x8d\\xb0\\xe5\\xbd\\x93\\xe6\\x97\\xb6\\xe7\\x9a\\x84\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x88\\xb3\\xe5\\x8f\\x8aPID\\xe3\\x80\\x82\\nfunction job_fail\\n{\\n    MSG=\"$*\"\\n    echo \"`eval $NOW` job_fail:[$MSG]\"\\n    exit 1\\n}\\n\\nfunction process_start\\n{\\n    cd ${GAME_DIR} || job_fail \"\\xe8\\xbf\\x9b\\xe5\\x85\\xa5\\xe6\\xb8\\xb8\\xe6\\x88\\x8f\\xe7\\x9b\\xae\\xe5\\xbd\\x95\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\"\\n    PROCESS_PID=\"$1\"\\n    \\n    nohup supervise ${GAME_DIR}/${PROCESS_PID} > /dev/null 2>&1  &\\n    sleep 2s\\n    [ -d $GAME_DIR/${PROCESS_PID}/supervise ] && chmod 777 -R ${GAME_DIR}/${PROCESS_PID}/supervise    \\n    \\n    # \\xe7\\x8a\\xb6\\xe6\\x80\\x81\\xe6\\xa3\\x80\\xe6\\x9f\\xa5, \\xe5\\x88\\xa4\\xe6\\x96\\xad\\xe6\\x98\\xaf\\xe5\\x90\\xa6\\xe5\\x90\\xaf\\xe5\\x8a\\xa8\\n    cd ${PROCESS_PID}\\n    ret=$(svstat . 2>&1)\\n    echo $ret | egrep -E \\'up .* seconds$\\' || job_fail \"\\xe5\\x90\\xaf\\xe5\\x8a\\xa8${PROCESS_PID}\\xe8\\xbf\\x9b\\xe7\\xa8\\x8b\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\"\\n    \\n    # \\xe5\\x88\\xa4\\xe6\\x96\\xad\\xe5\\x90\\xaf\\xe5\\x8a\\xa8\\xe6\\x97\\xb6\\xe9\\x97\\xb4\\xe6\\x98\\xaf\\xe5\\x90\\xa6\\xe8\\xb6\\x85\\xe8\\xbf\\x8720\\xe7\\xa7\\x92\\n    TIMEOUT=50\\n    TIMEOUT_RECORD=${TIMEOUT}\\n    isOK=false\\n    while [ ${TIMEOUT} -gt 0 ];\\n    do \\n        echo \"Wait for $PROCESS_PID starting > 20s\"\\n        sleep 1\\n        svstat .|egrep -E \"up .* [2-9][0-9]+ seconds$\" && isOK=true\\n        if [ $isOK == true ]; then break; fi\\n        let TIMEOUT-=1\\n    done;\\n    # \\xe5\\x88\\xa4\\xe6\\x96\\xad\\xe5\\xbc\\x80\\xe5\\xa7\\x8b\\xe7\\xbb\\x93\\xe6\\x9e\\x9c\\n    if [ $isOK == true ]; then\\n        echo \"$PROCESS_PID started\"\\n        return 0\\n    else\\n        job_fail \"\\xe7\\xbb\\x8f\\xe8\\xbf\\x87${TIMEOUT_RECORD}\\xe7\\xa7\\x92\\xe5\\x90\\x8e, \\xe5\\x81\\x9c\\xe6\\xad\\xa2${PROCESS_PID} \\xe4\\xbb\\x8d\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5\"\\n    fi                \\n    job_fail \"\\xe6\\x9c\\xaa\\xe7\\x9f\\xa5\\xe9\\x94\\x99\\xe8\\xaf\\xaf\"\\n}\\n\\njob_start\\n\\n# \\xe4\\xb8\\xba0\\xe8\\x84\\x9a\\xe6\\x9c\\xac\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe7\\x8a\\xb6\\xe6\\x80\\x81\\xe4\\xb8\\xba\\xe6\\x89\\x8b\\xe5\\xb7\\xa5\\xe8\\xbf\\x90\\xe8\\xa1\\x8c, \\xe4\\xb8\\xba1\\xe5\\x9c\\xa8opsmind\\xe4\\xb8\\x8a\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\nRUN_ON_OPSMIND=1\\n\\nif [ $RUN_ON_OPSMIND -eq 0 ];then\\n    # \\xe6\\x89\\x8b\\xe5\\xb7\\xa5\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\n    if [ $# -lt 1 ]; then\\n        job_fail \\'USAGE PROCESS_LIST\\'\\n    fi\\n    \\n    PROCESS_LIST=$1\\n    ####\\nelif [ $RUN_ON_OPSMIND -eq 1 ];then\\n    # \\xe5\\x9c\\xa8\\xe4\\xb8\\x8aopsmind\\xe8\\xbf\\x90\\xe8\\xa1\\x8c\\xe6\\x97\\xb6\\xe5\\x8a\\xa0\\xe8\\xbd\\xbd\\xe7\\x9a\\x84\\xe5\\x8f\\x98\\xe9\\x87\\x8f\\n    PROCESS_LIST=\"' + process_list + '\"\\nfi\\n\\n\\n\\nGAME_DIR=\"/home/data/hk4e\"\\n\\n\\nLOG_FILE=\"/tmp/hk4e.conf.log.\"`date \\'+%s\\'`\\n\\n\\n#\\xe6\\x9b\\xb4\\xe6\\x96\\xb0\\xe9\\x85\\x8d\\xe7\\xbd\\xae\\n# PROCESS EXAMPLE gameserver_2009.2.1.1\\n\\nfor PROCESS_PID in $PROCESS_LIST; do\\n    process=`echo $PROCESS_PID | cut -d \"_\" -f 1`\\n    pid=`echo $PROCESS_PID | cut -d \"_\" -f 2`\\n    echo \"Starting $process [$pid]\"\\n    cd ${GAME_DIR} || job_fail \"\\xe8\\xbf\\x9b\\xe5\\x85\\xa5\\xe6\\xb8\\xb8\\xe6\\x88\\x8f\\xe7\\x9b\\xae\\xe5\\xbd\\x95\\xe5\\xa4\\xb1\\xe8\\xb4\\xa5#2\" \\n    process_start $PROCESS_PID\\ndone\\n\\nEOF\\n'\n  \n      var task_id = ecu.genId(\"task\")\n  \n      var ret = ecu.startServerTask(agent_id, {\n          task_id: task_id,\n          name: \"start_script\",\n          exec_type: \"shell\",\n          exec_body: start_script,\n          timeout: 300, // 超时时间，超过超时时间，当前task会被kill -9 杀死\n          })  \n  \n      var waitResult = ecu.waitServerTask(agent_id, task_id, 300)\n      output[\"debug\"][host_name] = waitResult\n      output[\"debug\"][host_name][\"process_list\"] = process_list\n  \n      if (waitResult.exit_code !== 0){\n          is_success = false\n      }      \n\n    })\n    if (is_success === false){\n      step_success = false\n    }\n\n  }\n})\n\noutput.success = step_success\n\nctx.output(output)"
        },
        "descr": "ES2015 解析组件",
        "inputs": {
          "发布程序-成功": {
            "region_value": "{var:__START__.output.region}",
            "service_list": "{var:__START__.output.process_list}"
          }
        },
        "name": "开启服务",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-task",
        "config": {},
        "descr": "远程任务执行",
        "inputs": {
          "*": {
            "body_type": "shell",
            "target": "{\"objects\":[],\"conditions\":[{\"field\":\"inode.schema_id\",\"op\":\"=\",\"value\":\"cmdb_schema_server-0\"}],\"sorts\":[],\"offset\":0,\"limit\":50,\"selects\":[\".inode.name\",\".inode.schema_id\",\".inode.creator\",\".inode.last_editor\",\".inode.ctime\",\".inode.mtime\"],\"multi\":false,\"comment\":\"\"}"
          },
          "获取配置的时间变量": {
            "body": "#!/bin/bash\r\n\r\nsu - work <<'EOF'\r\n\r\nanynowtime=\"date +'%Y-%m-%d %H:%M:%S'\"\r\nNOW=\"echo [\\`$anynowtime\\`][PID:$$]\"\r\n\r\n##### 可在脚本开始运行时调用，打印当时的时间戳及PID。\r\nfunction job_start\r\n{\r\n    echo \"`eval $NOW` job_start\"\r\n}\r\n\r\n##### 可在脚本执行成功的逻辑分支处调用，打印当时的时间戳及PID。 \r\nfunction job_success\r\n{\r\n    MSG=\"$*\"\r\n    echo \"`eval $NOW` job_success:[$MSG]\"\r\n    exit 0\r\n}\r\n\r\n##### 可在脚本执行失败的逻辑分支处调用，打印当时的时间戳及PID。\r\nfunction job_fail\r\n{\r\n    MSG=\"$*\"\r\n    echo \"`eval $NOW` job_fail:[$MSG]\"\r\n    exit 1\r\n}\r\n\r\njob_start\r\n\r\n# 为0脚本运行状态为手工运行, 为1在opsmind上运行\r\nRUN_ON_OPSMIND=1\r\n\r\nif [ $RUN_ON_OPSMIND -eq 0 ];then\r\n    # 手工运行\r\n    if [ $# -lt 2 ]; then\r\n        job_fail 'USAGE REGION_NAME PROGRAM_BR TIME'\r\n    fi\r\n    \r\n    REGION_NAME=\"$1\"\r\n    PROGRAM_BR=\"$2\"\r\n    TIME=`date '+%Y-%m%d-%H%M'`\r\n    ####\r\nelif [ $RUN_ON_OPSMIND -eq 1 ];then\r\n    # 在上opsmind运行时加载的变量\r\n    REGION_NAME={var:__START__.output.region}\r\n    PROGRAM_BR={var:__START__.output.program_br}\r\n    TIME={var:获取配置的时间变量.output.time}\r\nfi\r\n\r\nif [ -z \"${REGION_NAME}\" ];then\r\n\tjob_fail \"REGION_NAME变量不能为空\"\r\nfi\r\n\r\nREGION_BUILD_PATH=/tmp/new_region/${REGION_NAME}\r\n\r\n\r\nmkdir -p ${REGION_BUILD_PATH}\r\ncd ${REGION_BUILD_PATH} || exit\r\nrm -rf op_tools\r\nrm -rf config\r\nrm -rf init.sql\r\nsvn export http://116.228.211.91:7777/svn/miHoYo/rdTeam/serverCode/app/hk4e/${PROGRAM_BR}/tools/op_tools\r\ncd ${REGION_BUILD_PATH}/op_tools|| job_fail \"切换目录失败#1\"\r\necho -e \"Y\\n\"|${REGION_BUILD_PATH}/op_tools/bin/build_conf.py ${REGION_NAME} ./config || job_fail \"build conf失败\"\r\n\r\n\r\nOSS_PATH=\"oss://hk4e-config/${REGION_NAME}/$TIME/\"\r\n\r\n#上传目录到oss\r\ncp ${REGION_BUILD_PATH}/op_tools/bin/run ./config || job_fail \"copy run到配置目录失败\"\r\ncd config || job_fail \"切换目录失败#2\"\r\ntar zcf ${REGION_BUILD_PATH}/op_tools/config-$TIME.tgz *\r\ncd .. || job_fail \"切换目录失败#3\"\r\nossutil cp -f config-$TIME.tgz $OSS_PATH || exit 1\r\n\r\n\r\nEOF",
            "body_type": "shell",
            "target": "cmdb_server-2t5q3bea97oad",
            "timeout": 60
          }
        },
        "name": "在qa-op01上执行buildconf_buildsql",
        "settings": {}
      }
    ]
  },
  "indexes": {}
}