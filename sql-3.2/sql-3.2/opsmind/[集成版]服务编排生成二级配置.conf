{
  "inode": {
    "org": "e303e78dc685",
    "id": "cmdb_workflow-vc6eq5bwoey7",
    "schema_id": "cmdb_schema_workflow-0",
    "name": "[集成版]服务编排生成二级配置",
    "namespace": "",
    "descr": "",
    "ctime": 1572518972,
    "mtime": 1572607955,
    "creator": "cmdb_account-3onu8wp84st9o",
    "last_editor": "cmdb_account-3onu8wp84st9o",
    "archived": false,
    "lock": ""
  },
  "data": {
    "edges": [
      {
        "from": "__START__",
        "to": "取得当前区服下的服务编排列表"
      },
      {
        "from": "取得当前区服下的服务编排列表",
        "to": "结果正常"
      },
      {
        "from": "取得当前区服下的服务编排列表",
        "to": "error"
      },
      {
        "from": "结果正常",
        "to": "列表展开"
      },
      {
        "from": "error",
        "to": "__END__"
      },
      {
        "from": "列表展开",
        "to": "生成二级配置"
      },
      {
        "from": "生成二级配置",
        "to": "__END__"
      }
    ],
    "icon": "",
    "nodes": [
      {
        "auto_run": true,
        "component": "cmdb_component-vars",
        "config": {
          "schema": "{\"type\":\"object\",\"properties\":{\"region_obj_id\":{\"type\":\"string\",\"title\":\"区服ID\"}},\"required\":[]}"
        },
        "descr": "自定义表单",
        "inputs": {
          "*": {
            "region_obj_id": "cmdb_x-n1s5jcvra01g"
          }
        },
        "name": "__START__",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-vars",
        "config": {},
        "descr": "自定义表单",
        "name": "__END__",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-interpreter_ecmascript",
        "config": {
          "input_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"region_obj_id\":{\"type\":\"string\",\"title\":\"区服ID\"}},\"required\":[\"region_obj_id\"]}",
          "output_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"error\":{\"type\":\"object\",\"properties\":{},\"title\":\"错误信息\"},\"service_list\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"title\":\"服务ID列表\"},\"port_config\":{\"type\":\"object\",\"properties\":{},\"title\":\"端口配置\"}},\"required\":[\"error\",\"service_list\",\"port_config\"]}",
          "script": "// WorkflowRuntimeContext 类型对象暴露 workflow 运行时方法\nvar ctx = new WorkflowRuntimeContext()\nvar input = ctx.input() // 获取input数据\n// ctx.output({xxxx}) 输出\nvar ecu = ctx.getECU()\n\nvar region_obj_id = input.region_obj_id\n\nvar output = {\n    debug: {},\n    error: \"\",\n    service_list: [],\n    port_config: {}\n}\n\nfunction main(){\n// 查询服务编排\nvar query = {\n    conditions: [\n        {\n            \"field\":\".inode.schema_id\",\n            \"op\":\"=\",\n            \"value\": \"cmdb_schema_x-lk22lxvs31sd\"\n        },\n        {\n            \"field\": \".indexes.cmdb_index-1ojgkr5s9jluq\",\n            \"op\": \"=\",\n            \"value\": region_obj_id\n        }\n    ],\n    objects:[\"$conditions\"],\n    selects: [\".inode.id\"]\n  }\n\n    var ret = ecu.queryObjects(query)\n\n    if (!ret || ret.objects.length < 1){\n        output[\"error\"] = \"查询服务编排失败\"\n    }\n\n    output[\"debug\"][\"service_ret\"] = ret\n\n    ret.objects.forEach(function(item){\n        output.service_list.push(item.inode.id)\n    })\n\n    // 查询port配置, 通过业务子系统关联的外键查询\n    var query = {\n        conditions: [\n            {\n                \"field\":\".inode.schema_id\",\n                \"op\":\"=\",\n                \"value\": \"cmdb_schema_x-xrbjlqi40big\"\n            },\n            {\n                \"field\": \".inode.id\",\n                \"op\": \"=\",\n                \"value\": region_obj_id\n            }\n        ],\n        objects:[\"$conditions\"],\n        selects: [\".inode.id\",\n                \".indexes.cmdb_index-3tzmsf2g6ybmg.data\"]\n    }\n\n    var ret = ecu.queryObjects(query)\n    // 日志\n    output[\"debug\"][\"port_config_ret\"] = ret\n\n    // 结果判断是否存在\n    if (!ret || ret.objects.length < 1){\n        output[\"error\"] = \"查询端口配置失败 #1\"\n        }\n    port_config = ret.objects[0].indexes[\"cmdb_index-3tzmsf2g6ybmg\"]? ret.objects[0].indexes[\"cmdb_index-3tzmsf2g6ybmg\"].data: undefined\n    \n    if (!port_config) {\n        output[\"error\"] = \"查询端口配置失败 #2\"\n    }\n        \n    output[\"port_config\"] = port_config\n}\n\ntry {\n    main()\n} catch (error) {\n    output[\"error\"] = error.message\n}\n\n\nctx.output(output)"
        },
        "descr": "ES2015 解析组件",
        "inputs": {
          "__START__": {
            "region_obj_id": "{var:__START__.output.region_obj_id}"
          }
        },
        "name": "取得当前区服下的服务编排列表",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-expand",
        "config": {
          "output_max_batch": 20,
          "output_min_intv": 5
        },
        "descr": "列表展开",
        "inputs": {
          "*": {},
          "结果正常": {
            "items": "{var:取得当前区服下的服务编排列表.output.service_list}"
          }
        },
        "name": "列表展开",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-condition",
        "config": {
          "array": false,
          "op": "字符串-相等"
        },
        "descr": "条件判断",
        "inputs": {
          "*": {},
          "取得当前区服下的服务编排列表": {
            "value": "{var:取得当前区服下的服务编排列表.output.error}"
          }
        },
        "name": "结果正常",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-condition",
        "config": {
          "array": false,
          "op": "字符串-不相等"
        },
        "descr": "条件判断",
        "inputs": {
          "*": {
            "target": "\"\""
          },
          "取得当前区服下的服务编排列表": {
            "value": "{var:取得当前区服下的服务编排列表.output.error}"
          }
        },
        "name": "error",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-interpreter_ecmascript",
        "config": {
          "input_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"service_id\":{\"type\":\"string\"},\"region_id\":{\"type\":\"string\"},\"port_config\":{\"type\":\"object\",\"properties\":{}}},\"required\":[\"service_id\",\"region_id\",\"port_config\"]}",
          "output_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"success\":{\"type\":\"boolean\"}},\"required\":[\"success\"]}",
          "script": "// WorkflowRuntimeContext 类型对象暴露 workflow 运行时方法\nvar ctx = new WorkflowRuntimeContext()\nvar input = ctx.input() // 获取input数据\nvar ecu = ctx.getECU();\n// ctx.output({xxxx}) 输出\nvar output = {\n    error: \"\",\n    debug: {},\n    success: false\n}\n\nvar service_id = input.service_id\nvar region_obj_id = input.region_id\nvar port_config = input.port_config\n\n// 1.选出一级配置\n// 2 生成进程配置, 关联到一级配置和所属区服\n// 3 返回结果是否成功\n\n//\n// 归档原先的进程实例\nfunction main() {\n    var query_archive = {\n        conditions: [\n            {\n                \"field\":\".inode.schema_id\",\n                \"op\":\"=\",\n                \"value\": \"cmdb_schema_x-2xmz0wfx00p3d\"\n            },\n            {\n                \"field\": \".indexes.cmdb_index-1ojgkr5s9jluq\",\n                \"op\": \"=\",\n                \"value\": region_obj_id\n            },\n            {\n                \"field\": \".indexes.cmdb_index-2vj4ybu227zju\",\n                \"op\": \"=\",\n                \"value\": service_id\n            }\n        ],\n        objects:[\"$conditions\"],\n        selects: [\".\"]\n      }\n    \n      ret = ecu.updateObjects(query_archive, {\n        object: {inode:{archived: true}},\n        updates:['inode.archived']\n      })\n    \n      output[\"debug\"][\"archive\"] = ret\n    //\n    \n    var query = {\n      conditions: [\n          {\n              \"field\":\".inode.schema_id\",\n              \"op\":\"=\",\n              \"value\": \"cmdb_schema_x-lk22lxvs31sd\"\n          },\n          {\n              \"field\": \".inode.id\",\n              \"op\": \"=\",\n              \"value\": service_id\n          }\n      ],\n      objects:[\"$conditions\"],\n      selects: [\".\",\n                //服务器的名称 内网 外网ip\n                \".indexes.cmdb_index-1cb0dsuicwu2x.inode.name\",\n                \".indexes.cmdb_index-1cb0dsuicwu2x.indexes.cmdb_index-134xtdnx301q6\",\n                \".indexes.cmdb_index-1cb0dsuicwu2x.indexes.cmdb_index-private_ip\",\n                \".indexes.cmdb_index-1cb0dsuicwu2x.indexes.cmdb_index-public_ip\",\n                //区服名称 region_ID\n                \".indexes.cmdb_index-1ojgkr5s9jluq.inode.name\",\n                \".indexes.cmdb_index-1ojgkr5s9jluq.data.region_id\",\n                //服务的类型ID\n                \".indexes.cmdb_index-2ftsii172v5gm.inode.name\",\n                \".indexes.cmdb_index-2ftsii172v5gm.data.type\"\n                ]\n    }\n    \n    var ret = ecu.queryObjects(query)\n    \n    if (ret.objects && ret.objects.length < 1) {\n        output[\"error\"] = \"没有查询到服务编排结果\"\n    }\n    \n    var obj = ret.objects[0]\n    var server_list = obj.indexes[\"cmdb_index-1cb0dsuicwu2x\"]\n    \n    output[\"debug\"][\"server_list\"] = server_list\n    output[\"debug\"][\"region_info\"] = obj.indexes[\"cmdb_index-1ojgkr5s9jluq\"]\n    output[\"debug\"][\"service_type\"] = obj.indexes[\"cmdb_index-2ftsii172v5gm\"].data.type\n    \n    var region_name = obj.indexes[\"cmdb_index-1ojgkr5s9jluq\"].inode.name\n    var region_id = obj.indexes[\"cmdb_index-1ojgkr5s9jluq\"].data.region_id\n    var service_name = obj.indexes[\"cmdb_index-2ftsii172v5gm\"].inode.name\n    var service_type_id = obj.indexes[\"cmdb_index-2ftsii172v5gm\"].data.type\n    // 进程数量\n    var num = obj.data.num\n    // 当前服务的port配置\n    var this_service_port_config = port_config[service_name]? port_config[service_name]: {}\n    output[\"debug\"][\"this_service_port_config\"] = this_service_port_config\n    \n    var process_obj_list = []\n    server_list.forEach(function(item){\n        var host_id = item.indexes[\"cmdb_index-134xtdnx301q6\"]\n        // 重置当前主机的port配置为初始服务的port配置\n        var this_server_port_config = JSON.parse(JSON.stringify(this_service_port_config))\n        for (var i = 1; i <= num; i +=1) {\n            // 分配port端口\n            var port = {}\n            //output[\"debug\"][\"this_server_port_config\"] = Object.getOwnPropertyNames(this_server_port_config)\n            Object.getOwnPropertyNames(this_server_port_config).forEach(function(port_item){\n                if (this_server_port_config[port_item][\"begin\"] > this_server_port_config[port_item][\"end\"]) {\n                    output[\"error\"] = service_name + \"端口分配超过上限\"\n                    return\n                }\n                port[port_item] = this_server_port_config[port_item][\"begin\"]\n                this_server_port_config[port_item][\"begin\"] += 1\n            })\n    \n            if (this_server_port_config[service_name] && JSON.stringify(port) == \"{}\"){\n                output[\"error\"] = service_name + \"端口分配发现错误\"\n                return            \n            }\n    \n            // 构建进程信息\n            var process_obj = {\n                inode: {\n                    name: region_name + '_' + service_name,\n                    schema_id: \"cmdb_schema_x-2xmz0wfx00p3d\"\n                },\n                data: {\n                    app_id: region_id + '.' + service_type_id + '.' + host_id + '.' + i,\n                    port: port\n                },\n                    indexes: {\n                        \"cmdb_index-1ojgkr5s9jluq\": region_obj_id,\n                        \"cmdb_index-2vj4ybu227zju\": service_id,\n                        \"cmdb_index-server\": item.inode.id\n                }\n            }\n            process_obj_list.push(process_obj)\n        }\n    })\n    \n    ret = ecu.createObjects(process_obj_list)\n    output[\"debug\"][\"create_ret\"] = ret\n    output[\"debug\"][\"num\"] = num\n    output[\"debug\"][\"server_list_length\"] = server_list.length\n    if (ret && ret.objects.length === num * server_list.length){\n        output[\"success\"] = true\n    }  \n}\n\n\nmain()\n\nctx.output(output)"
        },
        "descr": "ES2015 解析组件",
        "inputs": {
          "*": {},
          "列表展开": {
            "port_config": "{var:取得当前区服下的服务编排列表.output.port_config}",
            "region_id": "{var:__START__.output.region_obj_id}",
            "service_id": "{var:列表展开.output.item}"
          }
        },
        "name": "生成二级配置",
        "settings": {}
      }
    ]
  },
  "indexes": {}
}