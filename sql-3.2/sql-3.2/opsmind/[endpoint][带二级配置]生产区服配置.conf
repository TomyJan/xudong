{
  "inode": {
    "org": "e303e78dc685",
    "id": "cmdb_workflow-2g3pdpawz2qia",
    "schema_id": "cmdb_schema_workflow-0",
    "name": "[endpoint][带二级配置]生产区服配置",
    "namespace": "",
    "descr": "",
    "ctime": 1572598614,
    "mtime": 1572857434,
    "creator": "cmdb_account-3onu8wp84st9o",
    "last_editor": "cmdb_account-3onu8wp84st9o",
    "archived": false,
    "lock": ""
  },
  "data": {
    "edges": [
      {
        "from": "__START__",
        "to": "获取请求信息"
      },
      {
        "from": "获取请求信息",
        "to": "__END__"
      }
    ],
    "icon": "",
    "nodes": [
      {
        "auto_run": true,
        "component": "cmdb_component-vars",
        "config": {},
        "descr": "自定义表单",
        "name": "__START__",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-vars",
        "config": {
          "schema": "{\"type\": \"object\",\"properties\":{\"field\":{\"type\":\"string\",\"title\":\"自定义字段\"}}}"
        },
        "descr": "自定义表单",
        "inputs": {
          "获取请求信息": "{var:获取请求信息.output}"
        },
        "name": "__END__",
        "settings": {}
      },
      {
        "auto_run": true,
        "component": "cmdb_component-interpreter_ecmascript",
        "config": {
          "input_schema": "{\"type\":\"object\",\"title\":\"root\",\"properties\":{\"request\":{\"type\":\"object\",\"properties\":{},\"title\":\"外部请求参数\"},\"region_param\":{\"type\":\"string\",\"title\":\"Query 区服参数\"}},\"required\":[\"request\",\"region_param\"]}",
          "output_schema": "{\"type\":\"object\",\"title\":\"输出\",\"properties\":{}}",
          "script": "// WorkflowRuntimeContext 类型对象暴露 workflow 运行时方法\nvar ctx = new WorkflowRuntimeContext()\nvar input = ctx.input() // 获取input数据\nvar ecu = ctx.getECU()\n\nvar output = {}\n\nvar request = input.request\nvar region_value_parm = input.region_param\n\nfunction main(){\n    // 1. 参数判断\n    if (region_value_parm == \"\") {\n        return\n    }\n    if (!request.query || !request.query[region_value_parm] || request.query[region_value_parm].length == 0){\n        output['error'] = \"未指定参数\" + region_value_parm\n        return\n    }\n    var region_val = request.query[region_value_parm][0]\n    \n    // 2. 获取区服信息\n    var query = {\n        objects: [\"$conditions\"],\n        conditions: [{\n            field: \"indexes.cmdb_index-t9ul38dhptn3\",\n            op:\"=\",\n            value: region_val,\n        }, {\n            field:\"inode.schema_id\",\n            op:\"=\",\n            value: \"cmdb_schema_x-xrbjlqi40big\" // 业务子系统\n        }],\n        selects: ['.',\n\t\t\t\t  '.indexes.cmdb_index-2d54tagc2hgg5.inode.name',\n                  '.indexes.cmdb_index-2gaeuwmi6emjh.inode.name']\n    }\n    var ret = ecu.queryObjects(query)\n    if (!ret.objects || ret.objects.length == 0) {\n        output['error'] = \"区服不存在\"\n        return\n    }\n    var obj = ret.objects[0]\n    // var port_config = obj.indexes[\"cmdb_index-3tzmsf2g6ybmg\"]\n    // if (!port_config) {\n    //     output['error'] = \"端口配置不存在\"\n    //     return\n    // }\n\n    if (obj.data.type !== \"区服\" && obj.data.type !== \"Dispatch\" && obj.data.type !== \"HttpProxy\") {\n      output['error'] = \"区服类型不需要生成json\"\n      return\n    }    \n    output = {\n        region_name: region_val,\n        desc: obj.inode.name,\n        type: obj.data.type,\n        env: obj.data.env,\n        region_id: obj.data.region_id,\n        work_path: obj.data.work_path,\n        code_version: obj.indexes['cmdb_index-2d54tagc2hgg5']? obj.indexes['cmdb_index-2d54tagc2hgg5'].inode.name : '',\n        data_version: obj.indexes['cmdb_index-2gaeuwmi6emjh']? obj.indexes['cmdb_index-2gaeuwmi6emjh'].inode.name : '',\n        server_list: [],\n        mysql: {\n          user_db: {\n            db_list: []\n            },\n            config_db: {\n              db_list: []\n            }\n          },\n        redis: {\n          db_list: []  \n        },\n        debug: {},\n        error: []\n      }\n\n    // 3. 查询区服下服务器列表\n    var query = {\n        objects: [\"$conditions\"],\n        conditions: [{\n            field: \".indexes.cmdb_index-1ojgkr5s9jluq\",\n            op:\"=\",\n            value: obj.inode.id,\n        }, {\n            field: \"inode.schema_id\",\n            op:\"=\",\n            value: \"cmdb_schema_infra_server-0\" // 服务器\n        }],\n        selects: ['.']\n    }\n    var ret = ecu.queryObjects(query)\n    ret.objects.forEach(function(item){\n        output.server_list.push({\n            id: item.indexes['cmdb_index-134xtdnx301q6'],\n            host: item.inode.name,\n            inner_ip: item.indexes['cmdb_index-private_ip']? item.indexes['cmdb_index-private_ip'][0] : \"\",\n            outer_ip: item.indexes['cmdb_index-public_ip']? item.indexes['cmdb_index-public_ip'][0] : \"\"\n        })\n    })\n\t\n\t// 4. lookup mysql config\n\tvar query = {\n        objects: [\"$conditions\"],\n        conditions: [{\n            field: \".indexes.cmdb_index-1ojgkr5s9jluq\",\n            op:\"=\",\n            value: obj.inode.id,\n        }, {\n            field: \".inode.schema_id\",\n            op:\"=\",\n            value: \"cmdb_schema_x-2cgsdpcy356g2\" // mysql config\n        }],\n        selects: [\n                  '.',\n                  '.indexes.cmdb_index-10k2qsns4htlt.data',\n                  '.indexes.cmdb_index-10k2qsns4htlt.indexes.cmdb_index-3f353kifk518a.data'\n                  ]\n    }\n\tvar ret = ecu.queryObjects(query)\n    ret.objects.forEach(function(item){\n      if (item.data.type === 'user_db'){\n        output.mysql.user_db.db_list.push({\n          index: item.data.index,\n          dbname: item.indexes[\"cmdb_index-10k2qsns4htlt\"].data.db_name,\n          name: item.data.name,\n          user: item.data.user,\n          pwd: item.data.pwd,\n          host: item.indexes[\"cmdb_index-10k2qsns4htlt\"].indexes[\"cmdb_index-3f353kifk518a\"].data.cluster_inner_domain,\n          port: item.indexes[\"cmdb_index-10k2qsns4htlt\"].indexes[\"cmdb_index-3f353kifk518a\"].data.cluster_inner_port\n        })\t\t\t\n      }else if(item.data.type === 'config_db'){\n        output.mysql.config_db.db_list.push({\n          index: item.data.index,\n          dbname: item.indexes[\"cmdb_index-10k2qsns4htlt\"].data.db_name,\n          user: item.data.user,\n          pwd: item.data.pwd,\n          host: item.indexes[\"cmdb_index-10k2qsns4htlt\"].indexes[\"cmdb_index-3f353kifk518a\"].data.cluster_inner_domain,\n          port: item.indexes[\"cmdb_index-10k2qsns4htlt\"].indexes[\"cmdb_index-3f353kifk518a\"].data.cluster_inner_port        \n        })\n      }else if(item.data.type === 'dispatch_db_config'){\n        \n        var domain_url = \"\" \n        if(item.data.is_using_outer_address === true){\n          domain_url = item.indexes[\"cmdb_index-10k2qsns4htlt\"].indexes[\"cmdb_index-3f353kifk518a\"].data.cluster_public_domain\n        }else{\n          domain_url = item.indexes[\"cmdb_index-10k2qsns4htlt\"].indexes[\"cmdb_index-3f353kifk518a\"].data.cluster_inner_domain\n        }\n\n        output.mysql.config_db.db_list.push({\n          index: item.data.index,\n          dbname: item.indexes[\"cmdb_index-10k2qsns4htlt\"].data.db_name,\n          user: item.data.user,\n          pwd: item.data.pwd,\n          host: domain_url,\n          port: item.indexes[\"cmdb_index-10k2qsns4htlt\"].indexes[\"cmdb_index-3f353kifk518a\"].data.cluster_inner_port        \n        })      \n      }\n    })\t\n  // output.mysql.user_db.debug =  ret\n  \n  // 5. lookup redis config\n\tvar query = {\n    objects: [\"$conditions\"],\n    conditions: [{\n        field: \".indexes.cmdb_index-1ojgkr5s9jluq\",\n        op:\"=\",\n        value: obj.inode.id,\n    }, {\n        field: \".inode.schema_id\",\n        op:\"=\",\n        value: \"cmdb_schema_x-q3gwqn6249ng\" // mysql config\n    }],\n    selects: [\n              '.',\n              '.indexes.cmdb_index-18t51scz3qrqo.data'\n              ]\n  }\n\n  var ret = ecu.queryObjects(query)\n  //output.redis.debug = ret\n  ret.objects.forEach(function(item){\n    output.redis.db_list.push({\n      index: item.data.index,\n      name: item.data.name,\n      pwd: item.data.pwd,\n      host: item.indexes[\"cmdb_index-18t51scz3qrqo\"].data.inner_domain,\n      port: item.indexes[\"cmdb_index-18t51scz3qrqo\"].data.inner_port,\n      db: item.data.db\n    }) \n  })\n\n  // 6. lookup service orchestration\n\tvar query = {\n    objects: [\"$conditions\"],\n    conditions: [{\n        field: \".indexes.cmdb_index-1ojgkr5s9jluq\",\n        op:\"=\",\n        value: obj.inode.id,\n    }, {\n        field: \".inode.schema_id\",\n        op:\"=\",\n        value: \"cmdb_schema_x-lk22lxvs31sd\" // mysql config\n    }],\n    selects: [\n              '.',\n              // '.indexes.cmdb_index-1cb0dsuicwu2x.indexes.cmdb_index-134xtdnx301q6',\n              '.indexes.cmdb_index-2ftsii172v5gm.inode'\n              ]\n  }  \n\n  var ret = ecu.queryObjects(query)\n  ret.objects.forEach(function(item){\n\n    // host id\n    // var host_id = item.indexes[\"cmdb_index-1cb0dsuicwu2x\"].map(function(i){\n    //   return i.indexes[\"cmdb_index-134xtdnx301q6\"]\n    // }).toString()\n\n    // output.debug = item.indexes['cmdb_index-1cb0dsuicwu2x']\n    var service_name = item.indexes[\"cmdb_index-2ftsii172v5gm\"].inode.name\n    // output[service_name] = { servers: [], processes:[] }\n    // 当服务编排不存在时(考虑到之前已经存在的情况)\n    if (output[service_name] === undefined) {\n        output[service_name] = { processes:[] }\n    }\n\n    // // 判断是否为multiserver\n    // var servers_data = {}\n    // if (service_name === \"multiserver\"){\n    //   servers_data = {\n    //     host: host_id,\n    //     num: item.data.num,\n    //     service_list: item.data.threads\n    //   }\n    // }else{\n    //   servers_data = {\n    //     host: host_id,\n    //     num: item.data.num\n    //   }\n    // }\n\n    // 加入进程信息processes_data\n    var query = {\n        objects: [\"$conditions\"],\n        conditions: [{\n            field: \"indexes.cmdb_index-2vj4ybu227zju\",\n            op:\"=\",\n            value: item.inode.id,\n        }, {\n            field:\"inode.schema_id\",\n            op:\"=\",\n            value: \"cmdb_schema_x-2xmz0wfx00p3d\" // 进程对象id\n        }],\n        selects: ['.',\n                '.indexes.cmdb_index-server.inode.name',\n                '.indexes.cmdb_index-server.indexes.cmdb_index-134xtdnx301q6',\n                '.indexes.cmdb_index-server.indexes.cmdb_index-private_ip',\n                '.indexes.cmdb_index-server.indexes.cmdb_index-public_ip',\n                '.indexes.cmdb_index-2vj4ybu227zju.indexes.cmdb_index-2ftsii172v5gm.inode.name']\n        }\n    var process_ret = ecu.queryObjects(query)\n    // output[\"debug\"][\"\"] = \n    if (!process_ret.objects || process_ret.objects.length == 0) {\n        output['error'] = \"进程对象不存在\"\n        return\n    }\n    process_ret.objects.forEach(function(process_item){\n        if (!process_item.indexes[\"cmdb_index-server\"]) {\n            output[\"error\"] = \"进程关联的服务器不存在, id:\" + process_item.inode.id\n            return\n        }\n        var my_process_server = process_item.indexes[\"cmdb_index-server\"]\n        var processes_data = {app_id: process_item.data.app_id,\n                            port: process_item.data.port,\n                            server: {\n                                host: my_process_server.inode.name,\n                                id: process_item.indexes[\"cmdb_index-server\"].indexes[\"cmdb_index-134xtdnx301q6\"],\n                                inner_ip: my_process_server.indexes['cmdb_index-private_ip']? my_process_server.indexes['cmdb_index-private_ip'][0] : \"\",\n                                outer_ip: my_process_server.indexes['cmdb_index-public_ip']? my_process_server.indexes['cmdb_index-public_ip'][0] : \"\"\n                            },\n                            server_type: service_name}\n\n        // 判断是否为multiserver, 是的话增加service_list: 字段\n        if (service_name === \"multiserver\"){\n            processes_data.service_list = item.data.threads\n        }                           \n        output[service_name].processes.push(processes_data)\n    })\n    // \n    // output[service_name].servers.push(servers_data)\n  })\n\n  // 检查Services\n  var game_region = [\"gateserver\", \"gameserver\", \"nodeserver\", \"dbgate\", \"dispatch\", \"muipserver\", \"multiserver\"]\n  var httpproxy = [\"httpproxy\"]\n  var dispatch = [\"dispatch\"]\n  var service_list = []\n\n  var is_service_ok = true\n  if (output.type === \"区服\"){\n    service_list = game_region\n  }else if(output.type === \"httpproxy\"){\n    service_list = httpproxy\n  }else if(output.type === \"dispatch\"){\n    service_list = dispatch\n  }\n\n  service_list.forEach(function(item){\n    if( ! (output[item] && JSON.stringify(output[item][\"processes\"]) !== \"[]\")){\n      is_service_ok = false\n    }\n  })\n  if (is_service_ok === false){\n    output['error'].push(\"服务配置不正确\") \n  }\n\n  // 检查工作mysql redis\n\n  var is_db_ok = true\n  if (output.mysql.user_db.db_list.length === 0){\n    is_db_ok = false\n  }\n\n  if (output.mysql.config_db.db_list.length === 0){\n    is_db_ok = false\n  }\n\n  if (output.redis.db_list.length === 0){\n    is_db_ok = false\n  }  \n\n  if (is_db_ok === false){\n    output['error'].push(\"DB配置不正确\")\n  }\n  \n  if(output['error'] === []){\n    delete output['error']\n  }\n\n}\n\ntry {\n    main()\n}catch(e) {\n    output['error'] = e.message\n}\n\n\nctx.output(output)"
        },
        "descr": "ES2015 解析组件",
        "inputs": {
          "__START__": {
            "region_param": "region_value",
            "request": "{var:__START__.output}"
          }
        },
        "name": "获取请求信息",
        "settings": {}
      }
    ]
  },
  "indexes": {}
}